2025-09-04 01:48:33 INFO  (LoggingInitialization) Using log config file: jar:file:/Applications/ghidra_11.0.3_PUBLIC/Ghidra/Framework/Generic/lib/Generic.jar!/generic.log4j.xml  
2025-09-04 01:48:33 INFO  (LoggingInitialization) Using log file: /Users/chenkexin/Desktop/kk/test_taint/logs/emotion_ferplus_mnn_headless_analysis.log  
2025-09-04 01:48:33 INFO  (Preferences) Loading user preferences: /Users/chenkexin/.ghidra/.ghidra_11.0.3_PUBLIC/preferences  
2025-09-04 01:48:33 INFO  (Preferences) Loading previous preferences: /Users/chenkexin/.ghidra/.ghidra_10.4_PUBLIC/preferences  
2025-09-04 01:48:33 INFO  (ClassSearcher) Searching for classes...  
2025-09-04 01:48:35 INFO  (ClassSearcher) Class search complete (1327 ms)  
2025-09-04 01:48:35 INFO  (SSLContextInitializer) Initializing SSL Context  
2025-09-04 01:48:35 INFO  (SecureRandomFactory) Initializing Random Number Generator...  
2025-09-04 01:48:35 INFO  (SecureRandomFactory) Random Number Generator initialization complete: NativePRNGNonBlocking  
2025-09-04 01:48:35 INFO  (ApplicationTrustManagerFactory) Trust manager disabled, cacerts have not been set  
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer) HEADLESS Script Paths:
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/8051/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FileFormats/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Python/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/GnuDemangler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/SystemEmulation/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/MicrosoftCodeAnalyzer/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BytePatterns/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Decompiler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/Atmel/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-frida/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FunctionID/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/JVM/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/PIC/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BSim/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/PDB/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/DATA/ghidra_scripts
    /Users/chenkexin/ghidra_scripts
    /Users/chenkexin/Desktop/kk/test_taint
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-dbgmodel-traceloader/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-rmi-trace/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/VersionTracking/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger/ghidra_scripts  
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer) HEADLESS: execution starts  
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/emotion_ferplus_mnn  
2025-09-04 01:48:35 INFO  (DefaultProject) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/emotion_ferplus_mnn  
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer) REPORT: Processing input files:   
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer)      project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/emotion_ferplus_mnn  
2025-09-04 01:48:35 INFO  (HeadlessAnalyzer) IMPORTING: file:///Users/chenkexin/Desktop/kk/test_taint/assets/bin/emotion_ferplus_mnn  
2025-09-04 01:48:38 INFO  (AutoImporter) Using Loader: Executable and Linking Format (ELF)  
2025-09-04 01:48:38 INFO  (AutoImporter) Using Language/Compiler: AARCH64:LE:64:v8A:default  
2025-09-04 01:48:38 DEBUG (ElfHeader) Elf symbol table section .dynsym linked to string table section .dynstr  
2025-09-04 01:48:38 DEBUG (ElfHeader) Elf symbol table section .symtab linked to string table section .strtab  
2025-09-04 01:48:38 DEBUG (ElfHeader) Elf relocation table section .rela.dyn linked to symbol table section .dynsym affecting PT_LOAD  
2025-09-04 01:48:38 DEBUG (ElfHeader) Elf relocation table section .rela.plt linked to symbol table section .dynsym affecting .got.plt  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.3 at 00100253  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.7 at 001002cc  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.10 at 001011bd  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.12 at 0010123c  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 8-byte alignment/filler segment_2.17 at 00101b28  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 32-byte alignment/filler segment_2.19 at 00101e60  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 12-byte alignment/filler segment_2.22 at 00102d64  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 3-byte alignment/filler segment_2.24 at 00102f2d  
2025-09-04 01:48:38 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.26 at 00102fec  
2025-09-04 01:48:39 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fc88 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-09-04 01:48:39 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fc98 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-04 01:48:39 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fcb0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-04 01:48:39 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fd00 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-04 01:48:39 INFO  (HeadlessAnalyzer) IMPORTING: Loaded 0 additional files  
2025-09-04 01:48:39 INFO  (HeadlessAnalyzer) ANALYZING all memory and code: file:///Users/chenkexin/Desktop/kk/test_taint/assets/bin/emotion_ferplus_mnn  
2025-09-04 01:48:40 INFO  (ExternalDebugFilesService) DWARF external debug information found: ExternalDebugInfo [filename=null, crc=0, hash=369a3528da98104ce939c938090b7a51e20cfefa]  
2025-09-04 01:48:40 INFO  (DWARFAnalyzer) Unable to find DWARF information, skipping DWARF analysis  
2025-09-04 01:48:41 INFO  (PackedDatabaseCache) Packed database cache: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache  
2025-09-04 01:48:41 DEBUG (PackedDatabaseCache) Using cached packed database: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-09-04 01:48:42 INFO  (ApplyDataArchiveAnalyzer) Applied data type archive: generic_clib_64  
2025-09-04 01:48:43 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 001210e0: __cxxabiv1::__class_type_info::vtable  
2025-09-04 01:48:43 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121190: __cxxabiv1::__si_class_type_info::vtable  
2025-09-04 01:48:43 INFO  (AutoAnalysisManager) -----------------------------------------------------
    AARCH64 ELF PLT Thunks                     0.236 secs
    ASCII Strings                              0.268 secs
    Apply Data Archives                        1.065 secs
    Basic Constant Reference Analyzer          0.525 secs
    Call Convention ID                         0.113 secs
    Call-Fixup Installer                       0.016 secs
    Create Address Tables                      0.023 secs
    Create Address Tables - One Time           0.022 secs
    Create Function                            0.000 secs
    DWARF                                      0.026 secs
    Data Reference                             0.018 secs
    Decompiler Switch Analysis                 0.260 secs
    Demangler GNU                              0.198 secs
    Disassemble Entry Points                   0.058 secs
    Embedded Media                             0.012 secs
    External Entry References                  0.001 secs
    Function Start Search                      0.060 secs
    Function Start Search After Code           0.026 secs
    Function Start Search After Data           0.005 secs
    Function Start Search delayed - One Time   0.005 secs
    GCC Exception Handlers                     0.725 secs
    Non-Returning Functions - Discovered       0.013 secs
    Non-Returning Functions - Known            0.025 secs
    Reference                                  0.087 secs
    Shared Return Calls                        0.027 secs
    Stack                                      0.366 secs
    Subroutine References                      0.020 secs
-----------------------------------------------------
     Total Time   4 secs
-----------------------------------------------------
  
2025-09-04 01:48:43 INFO  (HeadlessAnalyzer) REPORT: Analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/bin/emotion_ferplus_mnn  
2025-09-04 01:48:43 INFO  (HeadlessAnalyzer) SCRIPT: /Users/chenkexin/Desktop/kk/test_taint/mnn_analyzer.py  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Searching for functions, thunks, and call sites related to keywords: ['getSessionOutput']  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found function 'getSessionOutput'. Searching for its thunks.  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00101c00 for function.  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00121060 for function.  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found 2 unique call sites. Analyzing each...  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> 
--- Starting Stage 1 Taint Analysis from '['getSessionOutput']' call sites ---  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1055756 at 00101c0c ---  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): getSessionOutput at 00101c00  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> INFO: Call at 00101c0c has no output varnode. Nothing to taint. Skipping.  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1057820 at 0010241c ---  
2025-09-04 01:48:48 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 0010241c) ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x10001681])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00101fd8 (Originating from: ['getSessionOutput']) with initial taints: UNNAMED(UniquePcode[0x10001681])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Analyzing varnode: (unique, 0x10001681, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Details: isAddress=0, addr=unique:10001681, isStackAddress=0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Def P-Code Op: (unique, 0x10001681, 8) CALL (ram, 0x101c00, 8) , (unique, 0x10001679, 8) , (register, 0x4000, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Mnemonic 'CALL' is not a handled case. Aborting path.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x10001681, 8) CALL (ram, 0x101c00, 8) , (unique, 0x10001679, 8) , (register, 0x4000, 8) at 0010241c in main, subsequent ops will be processed.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010241c] Taint propagated from UNNAMED(UniquePcode[0x10001681]) to pTVar13(x0) via CAST.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x10001689, 8), Def_Op: (unique, 0x10001689, 8) CAST (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffda0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x260  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x260. Calculated sink offset: -0x250  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_250' at offset -0x250.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1783: (ram, 0x102d80, 16) INDIRECT (ram, 0x102d80, 16) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1784: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1785: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1786: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1787: (stack, 0xfffffffffffffdc4, 1) INDIRECT (stack, 0xfffffffffffffdc4, 1) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1788: (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1789: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1790: (stack, 0xfffffffffffffdf8, 4) INDIRECT (stack, 0xfffffffffffffdf8, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1791: (stack, 0xfffffffffffffdfc, 4) INDIRECT (stack, 0xfffffffffffffdfc, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1792: (stack, 0xfffffffffffffe00, 4) INDIRECT (stack, 0xfffffffffffffe00, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1793: (stack, 0xfffffffffffffe04, 4) INDIRECT (stack, 0xfffffffffffffe04, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1794: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1795: (stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1796: (stack, 0xfffffffffffffe14, 8) INDIRECT (stack, 0xfffffffffffffe14, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1797: (stack, 0xfffffffffffffe1c, 8) INDIRECT (stack, 0xfffffffffffffe1c, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1798: (stack, 0xfffffffffffffe24, 4) INDIRECT (stack, 0xfffffffffffffe24, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1799: (stack, 0xfffffffffffffe28, 4) INDIRECT (stack, 0xfffffffffffffe28, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1800: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1801: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1802: (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1803: (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1804: (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1805: (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1806: (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1807: (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1808: (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1809: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1810: (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1811: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1812: (stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1813: (stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1814: (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1815: (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1816: (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1817: (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1818: (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1819: (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1820: (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1821: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1822: (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1823: (ram, 0x121108, 1) INDIRECT (ram, 0x121108, 1) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1824: (ram, 0x121118, 8) INDIRECT (ram, 0x121118, 8) , (const, 0x3d1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1825: (unique, 0x10001689, 8) CAST (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1826:  ---  CALL (ram, 0x101cb0, 8) , (register, 0x4000, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1827: (ram, 0x102d80, 16) INDIRECT (ram, 0x102d80, 16) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1828: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1829: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1830: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1831: (stack, 0xfffffffffffffdc4, 1) INDIRECT (stack, 0xfffffffffffffdc4, 1) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1832: (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1833: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1834: (stack, 0xfffffffffffffdf8, 4) INDIRECT (stack, 0xfffffffffffffdf8, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1835: (stack, 0xfffffffffffffdfc, 4) INDIRECT (stack, 0xfffffffffffffdfc, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1836: (stack, 0xfffffffffffffe00, 4) INDIRECT (stack, 0xfffffffffffffe00, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1837: (stack, 0xfffffffffffffe04, 4) INDIRECT (stack, 0xfffffffffffffe04, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1838: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1839: (stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1840: (stack, 0xfffffffffffffe14, 8) INDIRECT (stack, 0xfffffffffffffe14, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1841: (stack, 0xfffffffffffffe1c, 8) INDIRECT (stack, 0xfffffffffffffe1c, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1842: (stack, 0xfffffffffffffe24, 4) INDIRECT (stack, 0xfffffffffffffe24, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1843: (stack, 0xfffffffffffffe28, 4) INDIRECT (stack, 0xfffffffffffffe28, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1844: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1845: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1846: (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1847: (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1848: (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1849: (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1850: (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1851: (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1852: (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1853: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1854: (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1855: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1856: (stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1857: (stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1858: (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1859: (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1860: (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1861: (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1862: (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1863: (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1864: (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1865: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1866: (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1867: (ram, 0x121108, 1) INDIRECT (ram, 0x121108, 1) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1868: (ram, 0x121118, 8) INDIRECT (ram, 0x121118, 8) , (const, 0x3db, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1869: (unique, 0x100012d5, 8) COPY (stack, 0xfffffffffffffdb0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found sink use via COPY operation at address 00102444: (unique, 0x100012d5, 8) COPY (stack, 0xfffffffffffffdb0, 8). Tainting its output: puVar20(x9)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Added puVar20(x9) to current taint set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x36180, 1) INT_NOTEQUAL (unique, 0x28780, 4) , (const, 0x0, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102460] Taint reached CBRANCH. Operands: ['uVar1(UniquePcode[0x28780])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18a80, 1) INT_SLESS (unique, 0x10001695, 4) , (const, 0x0, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102464] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10001695])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18f00, 1) INT_EQUAL (unique, 0x36100, 4) , (const, 0x0, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 0010246c from instruction 'cbz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x36100, 4) , (const, 0x1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010248c] Taint reached CBRANCH. Operands: ['uVar2(UniquePcode[0x36100])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010248c] Taint propagated from puVar20(x9) to puVar18(x8) via COPY.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001024ac. Address varnode: (unique, 0x100016a5, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE SUCCESS: Tainting output due to load from tainted address pointer (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE PROPAGATION: Tainting the address pointer 'UNNAMED(UniquePcode[0x100016a5])' itself.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024ac] Taint propagated from Tainted Address Pointer (UNNAMED(UniquePcode[0x100016a5])) to fVar27(s0) via LOAD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024b0] Taint propagated from puVar20(x9) to puVar17(x8) via COPY.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024b0] Taint propagated from puVar20(x9) to puVar21(x10) via COPY.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001024b4. Address varnode: (unique, 0x100016bd, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE SUCCESS: Tainting output due to load from tainted address pointer (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE PROPAGATION: Tainting the address pointer 'UNNAMED(UniquePcode[0x100016bd])' itself.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024b4] Taint propagated from Tainted Address Pointer (UNNAMED(UniquePcode[0x100016bd])) to UNNAMED(s1) via LOAD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024b8] Taint propagated from UNNAMED(s1) to UNNAMED(NG) via FLOAT_LESSEQUAL.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001024b8] Taint reached COMPARISON op (FLOAT_LESSEQUAL). Operands: ['UNNAMED(s1)', 'fVar27(s0)'].  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x100, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (unique, 0x1000067e, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001024bc] Taint reached CBRANCH. Operands: ['UNNAMED(s1)', 'fVar27(s0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024bc] Taint propagated from UNNAMED(s1) to fVar30(s8) via COPY.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3df80, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001024cc] Taint reached CBRANCH. Operands: ['sVar6(x0)', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024d4] Taint propagated from puVar18(x8) to UNNAMED(UniquePcode[0x100016c5]) via CAST.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001024e4. Address varnode: (unique, 0x7e400, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7e400]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7e400]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024e4] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x100016cd]) via CAST.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001024e8] Taint propagated from fVar30(s8) to UNNAMED(s0) via FLOAT_SUB.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE_MATH] Detected call to 'expf' with tainted argument(s): UNNAMED(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE_MATH] Propagating taint to return value: fVar28(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: UNNAMED(UniquePcode[0xe3c00])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (register, 0x40b0, 8) , (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102504] Taint reached CBRANCH. Operands: ['uVar9(x0)', 'uVar19(x8)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x105, 1) INT_LESS (unique, 0x36100, 4) , (const, 0x8, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010250c] Taint reached CBRANCH. Operands: ['uVar2(UniquePcode[0x36100])', 'UnnamedHighVar(Constant: 0x8)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102520. Address varnode: (register, 0x40a0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode plVar25(x20) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer plVar25(x20) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102524. Address varnode: (unique, 0x6500, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6500]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6500]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102568] Taint reached CBRANCH. Operands: ['local_80(StackDirect[Stack[-0x80]])', 'unaff_x24(x24)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102594] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (unique, 0x10000f14, 8) at 00102570)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(NG)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. UNNAMED(UniquePcode[0x10001681])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     3. UNNAMED(UniquePcode[0x100016a5])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     4. UNNAMED(UniquePcode[0x100016bd])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     5. UNNAMED(UniquePcode[0x100016c5])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     6. UNNAMED(UniquePcode[0x100016cd])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     7. UNNAMED(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     8. UNNAMED(s1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     9. fVar27(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     10. fVar28(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     11. fVar30(s8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     12. pTVar13(x0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     13. puVar17(x8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     14. puVar18(x8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     15. puVar20(x9)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     16. puVar21(x10)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102594] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (const, 0xffffffff, 8) at 00102570)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(NG)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. UNNAMED(UniquePcode[0x10001681])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     3. UNNAMED(UniquePcode[0x100016a5])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     4. UNNAMED(UniquePcode[0x100016bd])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     5. UNNAMED(UniquePcode[0x100016c5])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     6. UNNAMED(UniquePcode[0x100016cd])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     7. UNNAMED(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     8. UNNAMED(s1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     9. fVar27(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     10. fVar28(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     11. fVar30(s8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     12. pTVar13(x0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     13. puVar17(x8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     14. puVar18(x8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     15. puVar20(x9)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     16. puVar21(x10)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025b0. Address varnode: (unique, 0x10000335, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000335]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000335]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025b0. Address varnode: (unique, 0x7b80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7b80]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7b80]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025b0. Address varnode: (unique, 0x10000345, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000345]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000345]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025b0. Address varnode: (register, 0x4048, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE SUCCESS: Tainting output due to load from tainted address pointer (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b0] Taint propagated from Tainted Address Pointer (puVar20(x9)) to UNNAMED(d2) via LOAD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x7b80]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x10000335]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x10000345]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from fVar27(s0) to UNNAMED(s1) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from UNNAMED(Register) to UNNAMED(d1) via PIECE.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025b8] Taint propagated from UNNAMED(Register) to UNNAMED(Register) via PIECE.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from fVar27(s0) to UNNAMED(s2) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from fVar27(s0) to UNNAMED(Register) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from UNNAMED(d2) to UNNAMED(s2) via SUBPIECE.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from UNNAMED(Register) to UNNAMED(d2) via PIECE.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from UNNAMED(Register) to UNNAMED(Register) via PIECE.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025bc] Taint propagated from UNNAMED(d2) to UNNAMED(UniquePcode[0x100016f5]) via CAST.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: UNNAMED(UniquePcode[0x1000033d])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: UNNAMED(UniquePcode[0x7b80])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: UNNAMED(UniquePcode[0x1000034d])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: puVar20(x9)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025c0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x7b80]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025c0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x1000033d]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025c0] Taint propagated from puVar20(x9) to UNNAMED(UniquePcode[0x1000034d]) via PTRADD.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3df80, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025c8] Taint reached CBRANCH. Operands: ['uVar22(x10)', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (register, 0x4040, 8) , (register, 0x40b0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025d0] Taint reached CBRANCH. Operands: ['uVar19(x8)', 'uVar9(x0)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025e0. Address varnode: (unique, 0x7e400, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7e400]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7e400]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001025e4] Taint propagated from fVar27(s0) to UNNAMED(s0) via FLOAT_DIV.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MEMORY_RULE] Tainting memory region pointed to by: UNNAMED(UniquePcode[0xe3c00])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (register, 0x40b0, 8) , (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025ec] Taint reached CBRANCH. Operands: ['uVar9(x0)', 'uVar22(x10)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010263c. Address varnode: (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x11f80]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x11f80]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x100000001, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102648] Taint reached CBRANCH. Operands: ['UNNAMED(x0)', 'UnnamedHighVar(Constant: 0x100000001)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010264c. Address varnode: (register, 0x4000, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode plVar24(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer plVar24(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102658. Address varnode: (unique, 0x6500, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6500]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6500]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102660. Address varnode: (register, 0x4000, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode plVar24(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer plVar24(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102668. Address varnode: (unique, 0x6500, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6500]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6500]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec8, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102680] Taint reached CBRANCH. Operands: ['local_140(StackDirect[Stack[-0x140]])', 'local_138(StackDirect[Stack[-0x138]])'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18f00, 1) INT_EQUAL (ram, 0x121108, 1) , (const, 0x0, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 00102694 from instruction 'cbz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec8, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001026b8] Taint reached CBRANCH. Operands: ['local_140(StackDirect[Stack[-0x140]])', 'local_138(StackDirect[Stack[-0x138]])'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10001044, 1) INT_NOTEQUAL (unique, 0x100010e1, 8) , (stack, 0xfffffffffffffeb0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001026d0] Taint reached CBRANCH. Operands: ['ppvVar7(x19)', 'ppvStack_150(StackDirect[Stack[-0x150]])'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10001172, 1) INT_NOTEQUAL (unique, 0x100011ef, 8) , (stack, 0xfffffffffffffe90, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001026e8] Taint reached CBRANCH. Operands: ['ppvVar7(x19)', 'ppvStack_170(StackDirect[Stack[-0x170]])'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18f80, 1) INT_NOTEQUAL (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 001026fc from instruction 'cbz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102704. Address varnode: (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x11f80]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x11f80]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x100000001, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102710] Taint reached CBRANCH. Operands: ['lVar15(x0)', 'UnnamedHighVar(Constant: 0x100000001)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102714. Address varnode: (stack, 0xfffffffffffffef8, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode local_108(StackDirect[Stack[-0x108]]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer local_108(StackDirect[Stack[-0x108]]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102720. Address varnode: (unique, 0x6500, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6500]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6500]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102728. Address varnode: (unique, 0x100012ed, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode plVar24(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer plVar24(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102730. Address varnode: (unique, 0x6500, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6500]) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6500]) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102748. Address varnode: (unique, 0x100010e1, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar7(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar7(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10001749, 8) , (register, 0x4098, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102750] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10001749])', 'UNNAMED(x19)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102768. Address varnode: (unique, 0x100011ef, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar7(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar7(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10001751, 8) , (register, 0x4098, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102770] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10001751])', 'UNNAMED(x19)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000cc8, 1) INT_NOTEQUAL (unique, 0x100010e9, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 00102780 from instruction 'cbnz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000dee, 1) INT_NOTEQUAL (unique, 0x100011f7, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 0010278c from instruction 'cbnz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18f00, 1) INT_EQUAL (ram, 0x121108, 1) , (const, 0x0, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 001027a0 from instruction 'cbz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100006e1, 1) INT_EQUAL (register, 0x4000, 4) , (const, 0x1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001027c0] Taint reached CBRANCH. Operands: ['iVar5(w0)', 'UnnamedHighVar(Constant: 0x1)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec8, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001027dc] Taint reached CBRANCH. Operands: ['local_140(StackDirect[Stack[-0x140]])', 'local_138(StackDirect[Stack[-0x138]])'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (register, 0x40a0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001027ec] Taint reached CBRANCH. Operands: ['ppvVar7(x19)', 'ppvVar26(x20)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001027f0. Address varnode: (register, 0x4098, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar7(x19) is not tainted (recursive check).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar7(x19) is not in the tainted memory regions set.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10001741, 8) , (register, 0x4098, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001027f8] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10001741])', 'UNNAMED(x19)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000ba2, 1) INT_NOTEQUAL (unique, 0x10000c57, 8) , (const, 0x0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 00102808 from instruction 'cbnz'.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (register, 0x4000, 4) , (const, 0x1, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102820] Taint reached CBRANCH. Operands: ['UNNAMED(w0)', 'UnnamedHighVar(Constant: 0x1)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000f1c, 1) INT_NOTEQUAL (unique, 0x10001009, 8) , (unique, 0x11f80, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102838] Taint reached CBRANCH. Operands: ['local_a0(StackDirect[Stack[-0xa0]])', 'unaff_x25(x25)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (stack, 0xffffffffffffff60, 8) , (register, 0x40c8, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102990] Taint reached CBRANCH. Operands: ['local_a0(StackDirect[Stack[-0xa0]])', 'unaff_x25(x25)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100007fe, 1) INT_EQUAL (unique, 0x10000903, 8) , (register, 0x40c0, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001029b4] Taint reached CBRANCH. Operands: ['local_80(StackDirect[Stack[-0x80]])', 'unaff_x24(x24)'].   
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> 
--- Stage 1 Complete. Checking for pending multi-stage analysis tasks... ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> --- No multi-stage analysis tasks were queued. ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> 
--- Taint Analysis Run Complete ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> \n--- All Detected Tainted Value Usages (Interprocedural) ---  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #1:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102460  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (unique, 0x36180, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x36180])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #2:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102464  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10286c, 1) , (unique, 0x18a80, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18a80])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #3:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010248c  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1024d0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #4:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001024b8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:            (register, 0x100, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (unique, 0x1000067e, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINTED_COMPARISON  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(s1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value used in a comparison operation (FLOAT_LESSEQUAL).  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #5:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001024bc  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1024c0, 1) , (register, 0x100, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(NG)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #6:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001024cc  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1024b4, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #7:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001024ec  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:            (register, 0x5000, 4) CALL (ram, 0x101da0, 8) , (register, 0x5000, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINT_PROPAGATED_BY_RULE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   fVar28(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Taint propagated through math function 'expf' from arg(s) (UNNAMED(s0)) to return value.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #8:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001024f8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (unique, 0xe3c00, 8) , (register, 0x5000, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   fVar28(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: UNNAMED(UniquePcode[0xe3c00])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #9:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102504  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1024dc, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #10:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010250c  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025a0, 1) , (register, 0x105, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpCY)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #11:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102568  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102570, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #12:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (unique, 0x1000033d, 8) , (register, 0x5028, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(Register)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: UNNAMED(UniquePcode[0x1000033d])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #13:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (unique, 0x7b80, 8) , (register, 0x5020, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(d1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: UNNAMED(UniquePcode[0x7b80])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #14:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (unique, 0x1000034d, 8) , (register, 0x5048, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(Register)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: UNNAMED(UniquePcode[0x1000034d])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #15:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (register, 0x4048, 8) , (register, 0x5040, 8)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(d2)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: puVar20(x9)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #16:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025b0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #17:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025d0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025f0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #18:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025e8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  STORE (const, 0x1b1, 4) , (unique, 0xe3c00, 8) , (register, 0x5000, 4)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          STORE_TAINTED_VALUE  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(s0)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Destination Address: UNNAMED(UniquePcode[0xe3c00])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value stored.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #19:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025ec  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025d4, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #20:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102648  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102688, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #21:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102680  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1027f0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #22:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001026b8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1027f0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #23:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001026d0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102748, 1) , (unique, 0x10001044, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10001044])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #24:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001026e8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102768, 1) , (unique, 0x10001172, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10001172])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #25:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102710  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102794, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #26:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102750  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10273c, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #27:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102770  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10275c, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #28:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001027c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026a8, 1) , (unique, 0x100006e1, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100006e1])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #29:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001027dc  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1027f0, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #30:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001027ec  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102804, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #31:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001027f8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1027e4, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #32:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102820  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102840, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #33:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102838  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10255c, 1) , (unique, 0x10000f1c, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10000f1c])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #34:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102990  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1029a8, 1) , (register, 0x108, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Usage #35:  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101fd8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001029b4  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1029a0, 1) , (unique, 0x100007fe, 1)  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100007fe])  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: TAINT_ANALYSIS_JSON_OUTPUT env var found. Saving results to: /Users/chenkexin/Desktop/kk/test_taint/results/emotion_ferplus_mnn_taint_analysis_results.json  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> Taint analysis results saved to: /Users/chenkexin/Desktop/kk/test_taint/results/emotion_ferplus_mnn_taint_analysis_results.json  
2025-09-04 01:48:49 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102460. Skipping.  
2025-09-04 01:48:49 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102464. Skipping.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w22,#0x1' at 00102480 for branch at 0010248c  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmp s0,s1' at 001024b8 for branch at 001024bc  
2025-09-04 01:48:49 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001024bc'  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmp s0,s1' at 001024b8 for branch at 001024cc  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x22,x21' at 001024fc for branch at 00102504  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w22,#0x8' at 00102508 for branch at 0010250c  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x24' at 00102564 for branch at 00102568  
2025-09-04 01:48:49 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 001025c8. Skipping.  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x8,x22' at 001025cc for branch at 001025d0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x22,x8' at 001025dc for branch at 001025ec  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x8' at 00102644 for branch at 00102648  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 0010267c for branch at 00102680  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 001026b4 for branch at 001026b8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 001026cc for branch at 001026d0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 001026e4 for branch at 001026e8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x8' at 0010270c for branch at 00102710  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x19' at 0010274c for branch at 00102750  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x19' at 0010276c for branch at 00102770  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w0,#0x1' at 001027bc for branch at 001027c0  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 001027d8 for branch at 001027dc  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x20' at 001027e8 for branch at 001027ec  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x19' at 001027f4 for branch at 001027f8  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w0,#0x1' at 0010281c for branch at 00102820  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x25' at 00102834 for branch at 00102838  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x25' at 0010298c for branch at 00102990  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x24' at 001029b0 for branch at 001029b4  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> SUCCESS: Hook configuration saved to: /Users/chenkexin/Desktop/kk/test_taint/results/emotion_ferplus_mnn_hook_config.json  
2025-09-04 01:48:49 INFO  (GhidraScript) mnn_analyzer.py> MNN Taint Analyzer finished.  
2025-09-04 01:48:49 INFO  (HeadlessAnalyzer) ANALYZING changes made by post scripts: file:///Users/chenkexin/Desktop/kk/test_taint/assets/bin/emotion_ferplus_mnn  
2025-09-04 01:48:49 INFO  (HeadlessAnalyzer) REPORT: Post-analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/bin/emotion_ferplus_mnn  
2025-09-04 01:48:50 INFO  (HeadlessAnalyzer) REPORT: Save succeeded for: /emotion_ferplus_mnn (emotion_ferplus_mnn:/emotion_ferplus_mnn)  
2025-09-04 01:48:50 INFO  (HeadlessAnalyzer) REPORT: Import succeeded  
2025-09-04 01:48:50 DEBUG (DefaultProjectData) Closing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/emotion_ferplus_mnn.rep  
2025-09-04 01:48:50 DEBUG (DefaultProjectData) Disposing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/emotion_ferplus_mnn.rep  
