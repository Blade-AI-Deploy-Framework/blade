2025-09-08 05:02:58 INFO  (LoggingInitialization) Using log config file: jar:file:/Applications/ghidra_11.0.3_PUBLIC/Ghidra/Framework/Generic/lib/Generic.jar!/generic.log4j.xml  
2025-09-08 05:02:58 INFO  (LoggingInitialization) Using log file: /Users/chenkexin/Desktop/kk/test_taint/logs/gender_googlenet_mnn_headless_analysis.log  
2025-09-08 05:02:58 INFO  (Preferences) Loading user preferences: /Users/chenkexin/.ghidra/.ghidra_11.0.3_PUBLIC/preferences  
2025-09-08 05:02:58 INFO  (Preferences) Loading previous preferences: /Users/chenkexin/.ghidra/.ghidra_10.4_PUBLIC/preferences  
2025-09-08 05:02:58 INFO  (ClassSearcher) Searching for classes...  
2025-09-08 05:02:59 INFO  (ClassSearcher) Class search complete (1435 ms)  
2025-09-08 05:02:59 INFO  (SSLContextInitializer) Initializing SSL Context  
2025-09-08 05:02:59 INFO  (SecureRandomFactory) Initializing Random Number Generator...  
2025-09-08 05:02:59 INFO  (SecureRandomFactory) Random Number Generator initialization complete: NativePRNGNonBlocking  
2025-09-08 05:02:59 INFO  (ApplicationTrustManagerFactory) Trust manager disabled, cacerts have not been set  
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer) HEADLESS Script Paths:
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/8051/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FileFormats/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Python/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/GnuDemangler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/SystemEmulation/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/MicrosoftCodeAnalyzer/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BytePatterns/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Decompiler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/Atmel/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-frida/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FunctionID/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/JVM/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/PIC/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BSim/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/PDB/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/DATA/ghidra_scripts
    /Users/chenkexin/ghidra_scripts
    /Users/chenkexin/Desktop/kk/test_taint
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-dbgmodel-traceloader/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-rmi-trace/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/VersionTracking/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger/ghidra_scripts  
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer) HEADLESS: execution starts  
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer) Opening existing project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/gender_googlenet_mnn  
2025-09-08 05:03:00 INFO  (HeadlessProject) Opening project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/gender_googlenet_mnn  
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer) REPORT: Processing input files:   
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer)      project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/gender_googlenet_mnn  
2025-09-08 05:03:00 INFO  (HeadlessAnalyzer) IMPORTING: file:///Users/chenkexin/Desktop/kk/test_taint/assets/gender_googlenet_mnn  
2025-09-08 05:03:02 INFO  (AutoImporter) Using Loader: Executable and Linking Format (ELF)  
2025-09-08 05:03:02 INFO  (AutoImporter) Using Language/Compiler: AARCH64:LE:64:v8A:default  
2025-09-08 05:03:03 DEBUG (ElfHeader) Elf symbol table section .dynsym linked to string table section .dynstr  
2025-09-08 05:03:03 DEBUG (ElfHeader) Elf symbol table section .symtab linked to string table section .strtab  
2025-09-08 05:03:03 DEBUG (ElfHeader) Elf relocation table section .rela.dyn linked to symbol table section .dynsym affecting PT_LOAD  
2025-09-08 05:03:03 DEBUG (ElfHeader) Elf relocation table section .rela.plt linked to symbol table section .dynsym affecting .got  
2025-09-08 05:03:03 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.3 at 00100253  
2025-09-08 05:03:03 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.7 at 001002cc  
2025-09-08 05:03:03 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.11 at 001011b4  
2025-09-08 05:03:03 DEBUG (ElfProgramBuilder) Discarding 12-byte alignment/filler segment_2.19 at 00102a54  
2025-09-08 05:03:03 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.22 at 00102d0c  
2025-09-08 05:03:03 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb68 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-09-08 05:03:03 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb78 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-08 05:03:03 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb90 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-08 05:03:03 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fba8 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-09-08 05:03:04 INFO  (HeadlessAnalyzer) IMPORTING: Loaded 0 additional files  
2025-09-08 05:03:04 INFO  (LocalFileSystem) /gender_googlenet_mnn: file deleted (chenkexin)  
2025-09-08 05:03:04 INFO  (GhidraFileData) Deleted local file gender_googlenet_mnn  
2025-09-08 05:03:04 WARN  (HeadlessAnalyzer) REPORT: Removed conflicting program file from project: /gender_googlenet_mnn  
2025-09-08 05:03:04 INFO  (HeadlessAnalyzer) ANALYZING all memory and code: file:///Users/chenkexin/Desktop/kk/test_taint/assets/gender_googlenet_mnn  
2025-09-08 05:03:04 INFO  (ExternalDebugFilesService) DWARF external debug information found: ExternalDebugInfo [filename=null, crc=0, hash=eb95d62478dbcfac6a56d4f5525e97f73c0c35a2]  
2025-09-08 05:03:04 INFO  (DWARFAnalyzer) Unable to find DWARF information, skipping DWARF analysis  
2025-09-08 05:03:06 INFO  (PackedDatabaseCache) Packed database cache: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache  
2025-09-08 05:03:06 DEBUG (PackedDatabaseCache) Using cached packed database: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-09-08 05:03:07 INFO  (ApplyDataArchiveAnalyzer) Applied data type archive: generic_clib_64  
2025-09-08 05:03:07 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121030: __cxxabiv1::__class_type_info::vtable  
2025-09-08 05:03:07 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121178: __cxxabiv1::__si_class_type_info::vtable  
2025-09-08 05:03:08 INFO  (AutoAnalysisManager) -----------------------------------------------------
    AARCH64 ELF PLT Thunks                     0.160 secs
    ASCII Strings                              0.259 secs
    Apply Data Archives                        1.178 secs
    Basic Constant Reference Analyzer          0.354 secs
    Call Convention ID                         0.181 secs
    Call-Fixup Installer                       0.011 secs
    Create Address Tables                      0.019 secs
    Create Address Tables - One Time           0.019 secs
    Create Function                            0.000 secs
    DWARF                                      0.007 secs
    Data Reference                             0.023 secs
    Decompiler Switch Analysis                 0.211 secs
    Demangler GNU                              0.213 secs
    Disassemble                                0.011 secs
    Disassemble Entry Points                   0.062 secs
    Embedded Media                             0.014 secs
    External Entry References                  0.001 secs
    Function Start Search                      0.067 secs
    Function Start Search After Code           0.017 secs
    Function Start Search After Data           0.005 secs
    Function Start Search delayed - One Time   0.004 secs
    GCC Exception Handlers                     0.895 secs
    Non-Returning Functions - Discovered       0.021 secs
    Non-Returning Functions - Known            0.011 secs
    Reference                                  0.059 secs
    Shared Return Calls                        0.021 secs
    Stack                                      0.264 secs
    Subroutine References                      0.020 secs
-----------------------------------------------------
     Total Time   4 secs
-----------------------------------------------------
  
2025-09-08 05:03:08 INFO  (HeadlessAnalyzer) REPORT: Analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/gender_googlenet_mnn  
2025-09-08 05:03:08 INFO  (HeadlessAnalyzer) SCRIPT: /Users/chenkexin/Desktop/kk/test_taint/mnn_analyzer.py  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Searching for functions, thunks, and call sites related to keywords: ['getSessionOutput']  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found function 'getSessionOutput'. Searching for its thunks.  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00101be0 for function.  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 001210d0 for function.  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found 2 unique call sites. Analyzing each...  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> 
--- Starting Stage 1 Taint Analysis from '['getSessionOutput']' call sites ---  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1055724 at 00101bec ---  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): getSessionOutput at 00101be0  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> INFO: Call at 00101bec has no output varnode. Nothing to taint. Skipping.  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1056744 at 00101fe8 ---  
2025-09-08 05:03:12 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 00101fe8) ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x10000608])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00101d80 (Originating from: ['getSessionOutput']) with initial taints: UNNAMED(UniquePcode[0x10000608])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Analyzing varnode: (unique, 0x10000608, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Details: isAddress=0, addr=unique:10000608, isStackAddress=0  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Def P-Code Op: (unique, 0x10000608, 8) CALL (ram, 0x101be0, 8) , (unique, 0x10000600, 8) , (register, 0x4000, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Mnemonic 'CALL' is not a handled case. Aborting path.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x10000608, 8) CALL (ram, 0x101be0, 8) , (unique, 0x10000600, 8) , (register, 0x4000, 8) at 00101fe8 in main, subsequent ops will be processed.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00101fe8] Taint propagated from UNNAMED(UniquePcode[0x10000608]) to pTVar13(x0) via CAST.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x10000610, 8), Def_Op: (unique, 0x10000610, 8) CAST (unique, 0x11f80, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffdb0, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x250  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x250. Calculated sink offset: -0x240  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_240' at offset -0x240.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 673: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 674: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 675: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 676: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 677: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 678: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 679: (stack, 0xfffffffffffffdd4, 1) INDIRECT (stack, 0xfffffffffffffdd4, 1) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 680: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 681: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 682: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 683: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 684: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 685: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 686: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 687: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 688: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 689: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 690: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 691: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 692: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 693: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 694: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 695: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 696: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 697: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 698: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 699: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 700: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 701: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 702: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 703: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 704: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 705: (ram, 0x121190, 8) INDIRECT (ram, 0x121190, 8) , (const, 0x1a7, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 706: (unique, 0x10000610, 8) CAST (unique, 0x11f80, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 707:  ---  CALL (ram, 0x101cb0, 8) , (register, 0x4000, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 708: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 709: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 710: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 711: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 712: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 713: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 714: (stack, 0xfffffffffffffdd4, 1) INDIRECT (stack, 0xfffffffffffffdd4, 1) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 715: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 716: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 717: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 718: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 719: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 720: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 721: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 722: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 723: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 724: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 725: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 726: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 727: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 728: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 729: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 730: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 731: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 732: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 733: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 734: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 735: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 736: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 737: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 738: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 739: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 740: (ram, 0x121190, 8) INDIRECT (ram, 0x121190, 8) , (const, 0x1ab, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 741: (unique, 0x100004e8, 8) COPY (stack, 0xfffffffffffffdc0, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found sink use via COPY operation at address 00102010: (unique, 0x100004e8, 8) COPY (stack, 0xfffffffffffffdc0, 8). Tainting its output: puVar9(x0)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Added puVar9(x0) to current taint set.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x36180, 1) INT_NOTEQUAL (unique, 0x13680, 4) , (const, 0x0, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010202c] Taint reached CBRANCH. Operands: ['iVar2(UniquePcode[0x13680])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102030] Taint propagated from puVar9(x0) to UNNAMED(UniquePcode[0x1000061c]) via CAST.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102034] Taint propagated from puVar9(x0) to UNNAMED(tmpZR) via INT_EQUAL.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102034] Taint reached COMPARISON op (INT_EQUAL). Operands: ['puVar1(UniquePcode[0x11800])', 'puVar9(x0)'].  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x11800, 8) , (unique, 0x100004e8, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102038] Taint reached CBRANCH. Operands: ['puVar1(UniquePcode[0x11800])', 'puVar9(x0)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010203c] Taint propagated from puVar9(x0) to UNNAMED(UniquePcode[0x1000062c]) via CAST.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x11800, 8) , (unique, 0x11f80, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102044] Taint reached CBRANCH. Operands: ['puVar1(UniquePcode[0x11800])', 'puVar15(x1)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102048. Address varnode: (unique, 0x1000063c, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE SUCCESS: Tainting output due to load from tainted address pointer (recursive check).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE PROPAGATION: Tainting the address pointer 'UNNAMED(UniquePcode[0x1000063c])' itself.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102048] Taint propagated from Tainted Address Pointer (UNNAMED(UniquePcode[0x1000063c])) to fVar18(s1) via LOAD.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010204c] Taint propagated from puVar9(x0) to puVar16(x2) via COPY.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102050. Address varnode: (unique, 0x10000644, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000644]) is not tainted (recursive check).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000644]) is not in the tainted memory regions set.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102058] Taint propagated from fVar18(s1) to UNNAMED(UniquePcode[0x1400]) via FLOAT_LESS.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102058] Taint reached COMPARISON op (FLOAT_LESS). Operands: ['fVar18(s1)', 'UNNAMED(s0)'].  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5020, 4) , (register, 0x5000, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102058] Taint reached CBRANCH. Operands: ['fVar18(s1)', 'UNNAMED(s0)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11800, 8) , (unique, 0x11f80, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102064] Taint reached CBRANCH. Operands: ['puVar1(UniquePcode[0x11800])', 'puVar15(x1)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102068] Taint propagated from puVar16(x2) to UNNAMED(UniquePcode[0x1000065c]) via CAST.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102068] Taint propagated from puVar9(x0) to UNNAMED(UniquePcode[0x10000664]) via CAST.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (register, 0x4010, 4) , (const, 0x1, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102074] Taint reached CBRANCH. Operands: ['UNNAMED(w2)', 'UnnamedHighVar(Constant: 0x1)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102080] Taint propagated from fVar18(s1) to UNNAMED(UniquePcode[0x1400]) via FLOAT_LESSEQUAL.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102080] Taint reached COMPARISON op (FLOAT_LESSEQUAL). Operands: ['fVar18(s1)', 'UnnamedHighVar(Constant: 0x3f000000)'].  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (const, 0x3f000000, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102080] Taint reached CBRANCH. Operands: ['fVar18(s1)', 'UnnamedHighVar(Constant: 0x3f000000)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102104] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3e480])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010211c] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (register, 0x4098, 8) at 0010210c)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(UniquePcode[0x10000608])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. UNNAMED(UniquePcode[0x1000061c])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     3. UNNAMED(UniquePcode[0x1000062c])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     4. UNNAMED(UniquePcode[0x1000063c])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     5. UNNAMED(UniquePcode[0x1000065c])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     6. UNNAMED(UniquePcode[0x10000664])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     7. UNNAMED(UniquePcode[0x1400])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     8. UNNAMED(UniquePcode[0x1400])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     9. UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     10. fVar18(s1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     11. pTVar13(x0)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     12. puVar16(x2)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     13. puVar9(x0)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102188. Address varnode: (register, 0x4008, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode param_2(x1) is not tainted (recursive check).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer param_2(x1) is not in the tainted memory regions set.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> 
--- Stage 1 Complete. Checking for pending multi-stage analysis tasks... ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> --- No multi-stage analysis tasks were queued. ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> 
--- Taint Analysis Run Complete ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> \n--- All Detected Tainted Value Usages (Interprocedural) ---  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #1:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010202c  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (unique, 0x36180, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x36180])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #2:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102034  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:            (register, 0x108, 1) INT_EQUAL (unique, 0x11800, 8) , (unique, 0x100004e8, 8)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINTED_COMPARISON  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   puVar9(x0)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value used in a comparison operation (INT_EQUAL).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #3:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102038  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102084, 1) , (register, 0x108, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #4:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102044  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102084, 1) , (register, 0x108, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #5:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102058  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:            (unique, 0x1400, 1) FLOAT_LESS (register, 0x5020, 4) , (register, 0x5000, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINTED_COMPARISON  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   fVar18(s1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value used in a comparison operation (FLOAT_LESS).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #6:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102058  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102120, 1) , (unique, 0x1400, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #7:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102064  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102050, 1) , (register, 0x108, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #8:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102074  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102084, 1) , (register, 0x108, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #9:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102080  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:            (unique, 0x1400, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (const, 0x3f000000, 4)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINTED_COMPARISON  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   fVar18(s1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted value used in a comparison operation (FLOAT_LESSEQUAL).  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #10:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102080  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102160, 1) , (unique, 0x1400, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Usage #11:  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: ['getSessionOutput']  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d80  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102104  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1021bc, 1) , (register, 0x108, 1)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: TAINT_ANALYSIS_JSON_OUTPUT env var found. Saving results to: /Users/chenkexin/Desktop/kk/test_taint/results/gender_googlenet_mnn_taint_analysis_results.json  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> Taint analysis results saved to: /Users/chenkexin/Desktop/kk/test_taint/results/gender_googlenet_mnn_taint_analysis_results.json  
2025-09-08 05:03:13 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 0010202c. Skipping.  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x19' at 00102034 for branch at 00102038  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x1' at 00102040 for branch at 00102044  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s0,s1' at 00102054 for branch at 00102058  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x1' at 00102060 for branch at 00102064  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w2,#0x1' at 00102070 for branch at 00102074  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 0010207c for branch at 00102080  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'subs x2,x2,x1' at 001020fc for branch at 00102104  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> SUCCESS: Hook configuration saved to: /Users/chenkexin/Desktop/kk/test_taint/results/gender_googlenet_mnn_hook_config.json  
2025-09-08 05:03:13 INFO  (GhidraScript) mnn_analyzer.py> MNN Taint Analyzer finished.  
2025-09-08 05:03:13 INFO  (HeadlessAnalyzer) ANALYZING changes made by post scripts: file:///Users/chenkexin/Desktop/kk/test_taint/assets/gender_googlenet_mnn  
2025-09-08 05:03:13 INFO  (HeadlessAnalyzer) REPORT: Post-analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/gender_googlenet_mnn  
2025-09-08 05:03:13 INFO  (HeadlessAnalyzer) REPORT: Save succeeded for: /gender_googlenet_mnn (gender_googlenet_mnn:/gender_googlenet_mnn)  
2025-09-08 05:03:13 INFO  (HeadlessAnalyzer) REPORT: Import succeeded  
2025-09-08 05:03:13 DEBUG (DefaultProjectData) Closing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/gender_googlenet_mnn.rep  
2025-09-08 05:03:13 DEBUG (DefaultProjectData) Disposing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/gender_googlenet_mnn.rep  
