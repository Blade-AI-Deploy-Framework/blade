2025-07-10 10:22:51 INFO  (LoggingInitialization) Using log config file: jar:file:/Applications/ghidra_11.0.3_PUBLIC/Ghidra/Framework/Generic/lib/Generic.jar!/generic.log4j.xml  
2025-07-10 10:22:51 INFO  (LoggingInitialization) Using log file: /Users/chenkexin/Desktop/kk/test_taint/logs/mnist_mnn_console_headless_analysis.log  
2025-07-10 10:22:51 INFO  (Preferences) Loading user preferences: /Users/chenkexin/.ghidra/.ghidra_11.0.3_PUBLIC/preferences  
2025-07-10 10:22:51 INFO  (Preferences) Loading previous preferences: /Users/chenkexin/.ghidra/.ghidra_10.4_PUBLIC/preferences  
2025-07-10 10:22:51 INFO  (ClassSearcher) Searching for classes...  
2025-07-10 10:22:53 INFO  (ClassSearcher) Class search complete (2205 ms)  
2025-07-10 10:22:53 INFO  (SSLContextInitializer) Initializing SSL Context  
2025-07-10 10:22:53 INFO  (SecureRandomFactory) Initializing Random Number Generator...  
2025-07-10 10:22:53 INFO  (SecureRandomFactory) Random Number Generator initialization complete: NativePRNGNonBlocking  
2025-07-10 10:22:53 INFO  (ApplicationTrustManagerFactory) Trust manager disabled, cacerts have not been set  
2025-07-10 10:22:53 INFO  (FileCacheMaintenanceDaemon) Starting cache cleanup: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/fscache2  
2025-07-10 10:22:53 INFO  (FileCacheMaintenanceDaemon) Finished cache cleanup, estimated storage used: 0  
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer) HEADLESS Script Paths:
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/8051/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FileFormats/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Python/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/GnuDemangler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/SystemEmulation/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/MicrosoftCodeAnalyzer/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BytePatterns/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Decompiler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/Atmel/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-frida/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FunctionID/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/JVM/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/PIC/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BSim/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/PDB/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/DATA/ghidra_scripts
    /Users/chenkexin/ghidra_scripts
    /Users/chenkexin/Desktop/kk/test_taint
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-dbgmodel-traceloader/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-rmi-trace/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/VersionTracking/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger/ghidra_scripts  
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer) HEADLESS: execution starts  
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer) Creating project: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/tmp.kINNX7UAvb/HeadlessTaintAnalysis  
2025-07-10 10:22:55 INFO  (DefaultProject) Creating project: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/tmp.kINNX7UAvb/HeadlessTaintAnalysis  
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer) REPORT: Processing input files:   
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer)      project: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/tmp.kINNX7UAvb/HeadlessTaintAnalysis  
2025-07-10 10:22:55 INFO  (HeadlessAnalyzer) IMPORTING: file:///Users/chenkexin/Desktop/kk/test_taint/mnist_mnn_console  
2025-07-10 10:22:58 INFO  (AutoImporter) Using Loader: Executable and Linking Format (ELF)  
2025-07-10 10:22:58 INFO  (AutoImporter) Using Language/Compiler: AARCH64:LE:64:v8A:default  
2025-07-10 10:22:59 DEBUG (ElfHeader) Elf symbol table section .dynsym linked to string table section .dynstr  
2025-07-10 10:22:59 DEBUG (ElfHeader) Elf symbol table section .symtab linked to string table section .strtab  
2025-07-10 10:22:59 DEBUG (ElfHeader) Elf relocation table section .rela.dyn linked to symbol table section .dynsym affecting PT_LOAD  
2025-07-10 10:22:59 DEBUG (ElfHeader) Elf relocation table section .rela.plt linked to symbol table section .dynsym affecting .got  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.3 at 00100253  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.7 at 00100304  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.10 at 00101525  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 6-byte alignment/filler segment_2.12 at 001015d2  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.17 at 0010302c  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 12-byte alignment/filler segment_2.21 at 00105434  
2025-07-10 10:22:59 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.24 at 00105e84  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117908 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117918 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117960 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a30 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117928 (External Location = _ZTVN10__cxxabiv116__enum_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117938 (External Location = _ZTVN10__cxxabiv116__enum_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117948 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117970 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117988 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 001179a0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 001179b8 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 001179d0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 001179e8 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a00 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a18 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a40 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a58 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a70 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117a88 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117aa0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117ab8 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117ad0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117ae8 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117b00 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117b18 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:00 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 00117b30 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-07-10 10:23:01 INFO  (HeadlessAnalyzer) IMPORTING: Loaded 0 additional files  
2025-07-10 10:23:01 INFO  (HeadlessAnalyzer) ANALYZING all memory and code: file:///Users/chenkexin/Desktop/kk/test_taint/mnist_mnn_console  
2025-07-10 10:23:02 INFO  (ExternalDebugFilesService) DWARF external debug information found: ExternalDebugInfo [filename=null, crc=0, hash=ef130be1229976da3acfae2ff6b8fabe7e3bb9c4]  
2025-07-10 10:23:02 INFO  (DWARFAnalyzer) Unable to find DWARF information, skipping DWARF analysis  
2025-07-10 10:23:06 INFO  (PackedDatabaseCache) Packed database cache: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache  
2025-07-10 10:23:06 DEBUG (PackedDatabaseCache) Caching packed database: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-07-10 10:23:06 DEBUG (PackedDatabase) Unpacking database /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt -> /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache/pdbD966D81B/db.1.gbf  
2025-07-10 10:23:06 DEBUG (PackedDatabaseCache) Cache update completed: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-07-10 10:23:08 INFO  (ApplyDataArchiveAnalyzer) Applied data type archive: generic_clib_64  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00119038: __cxxabiv1::__class_type_info::vtable  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00119060: int::typeinfo  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00119088: float::typeinfo  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 001190a0: char_const*::typeinfo  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 001190c8: bool::typeinfo  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00119148: unsigned_int::typeinfo  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 001191d0: __cxxabiv1::__si_class_type_info::vtable  
2025-07-10 10:23:08 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 001191f8: __cxxabiv1::__enum_type_info::vtable  
2025-07-10 10:23:11 INFO  (AutoAnalysisManager) -----------------------------------------------------
    AARCH64 ELF PLT Thunks                     0.369 secs
    ASCII Strings                              0.507 secs
    Apply Data Archives                        1.676 secs
    Basic Constant Reference Analyzer          0.970 secs
    Call Convention ID                         0.851 secs
    Call-Fixup Installer                       0.035 secs
    Create Address Tables                      0.037 secs
    Create Address Tables - One Time           0.074 secs
    Create Function                            0.000 secs
    DWARF                                      0.014 secs
    Data Reference                             0.065 secs
    Decompiler Switch Analysis                 0.448 secs
    Demangler GNU                              0.775 secs
    Disassemble                                0.036 secs
    Disassemble Entry Points                   0.489 secs
    Embedded Media                             0.025 secs
    External Entry References                  0.005 secs
    Function Start Search                      0.108 secs
    Function Start Search After Code           0.069 secs
    Function Start Search After Data           0.009 secs
    Function Start Search delayed - One Time   0.013 secs
    GCC Exception Handlers                     1.771 secs
    Non-Returning Functions - Discovered       0.049 secs
    Non-Returning Functions - Known            0.037 secs
    Reference                                  0.282 secs
    Shared Return Calls                        0.054 secs
    Stack                                      0.944 secs
    Subroutine References                      0.029 secs
-----------------------------------------------------
     Total Time   9 secs
-----------------------------------------------------
  
2025-07-10 10:23:11 INFO  (HeadlessAnalyzer) REPORT: Analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/mnist_mnn_console  
2025-07-10 10:23:11 INFO  (HeadlessAnalyzer) SCRIPT: /Users/chenkexin/Desktop/kk/test_taint/mnn_analyzer.py  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Searching for functions, thunks, and call sites related to keyword 'getSessionOutput'  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found function 'getSessionOutput'. Searching for its thunks.  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 001031e0 for function.  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00119118 for function.  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found 2 unique call sites. Analyzing each...  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> 
--- Starting Stage 1 Taint Analysis from 'getSessionOutput' call sites ---  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1061356 at 001031ec ---  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): getSessionOutput at 001031e0  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> INFO: Call at 001031ec has no output varnode. Nothing to taint. Skipping.  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1063472 at 00103a30 ---  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00103390  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 00103a30) ---  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x10001162])  
2025-07-10 10:23:18 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00103390 (Originating from: getSessionOutput) with initial taints: UNNAMED(UniquePcode[0x10001162])  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x10001162, 8) CALL (ram, 0x1031e0, 8) , (unique, 0x1000115a, 8) , (register, 0x4000, 8) at 00103a30 in main, subsequent ops will be processed.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a30] Taint propagated from UNNAMED(UniquePcode[0x10001162]) to pTVar20(x0) via CAST.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x1000116a, 8), Def_Op: (unique, 0x1000116a, 8) CAST (unique, 0x11f80, 8)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffe38, 8)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x1c8  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x1c8. Calculated sink offset: -0x1b8  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_1b8' at offset -0x1b8.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1754: (ram, 0x105aa0, 16) INDIRECT (ram, 0x105aa0, 16) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1755: (stack, 0xfffffffffffffdd0, 8) INDIRECT (stack, 0xfffffffffffffdd0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1756: (stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1757: (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1758: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1759: (stack, 0xfffffffffffffe38, 4) INDIRECT (stack, 0xfffffffffffffe38, 4) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1760: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1761: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1762: (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1763: (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1764: (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1765: (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1766: (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1767: (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1768: (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1769: (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1770: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1771: (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1772: (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1773: (stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1774: (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1775: (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1776: (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1777: (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1778: (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1779: (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1780: (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1781: (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1782: (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1783: (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1784: (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1785: (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1786: (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1787: (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1788: (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1789: (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1790: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1791: (stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1792: (ram, 0x119108, 8) INDIRECT (ram, 0x119108, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1793: (ram, 0x1191f0, 8) INDIRECT (ram, 0x1191f0, 8) , (const, 0x762, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1794: (unique, 0x1000116a, 8) CAST (unique, 0x11f80, 8)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1795:  ---  CALL (ram, 0x1032b0, 8) , (register, 0x4000, 8)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1796: (ram, 0x105aa0, 16) INDIRECT (ram, 0x105aa0, 16) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1797: (stack, 0xfffffffffffffdd0, 8) INDIRECT (stack, 0xfffffffffffffdd0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1798: (stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1799: (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1800: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1801: (stack, 0xfffffffffffffe38, 4) INDIRECT (stack, 0xfffffffffffffe38, 4) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1802: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1803: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1804: (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1805: (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1806: (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1807: (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1808: (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1809: (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1810: (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1811: (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1812: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1813: (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1814: (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1815: (stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1816: (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1817: (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1818: (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1819: (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1820: (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1821: (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1822: (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1823: (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1824: (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1825: (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1826: (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1827: (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1828: (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1829: (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1830: (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1831: (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1832: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1833: (stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1834: (ram, 0x119108, 8) INDIRECT (ram, 0x119108, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1835: (ram, 0x1191f0, 8) INDIRECT (ram, 0x1191f0, 8) , (const, 0x766, 4)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1836: (unique, 0x10000d51, 8) COPY (stack, 0xfffffffffffffe48, 8)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found sink use via COPY operation at address 00103a58: (unique, 0x10000d51, 8) COPY (stack, 0xfffffffffffffe48, 8). Tainting its output: pauVar19(x0)  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Added pauVar19(x0) to current taint set.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a68] Taint propagated from pauVar19(x0) to auVar40 (HighVar Repr) via LOAD.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a68] Taint propagated from pauVar19(x0) to UNNAMED(UniquePcode[0x7c600]) via PTRADD.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a74] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(d0) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a74] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a7c] Taint propagated from pauVar19(x0) to UNNAMED(UniquePcode[0x6500]) via PTRADD.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a7c] Taint propagated from UNNAMED(UniquePcode[0x6500]) to UNNAMED(UniquePcode[0x10000c0f]) via PTRSUB.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103a7c] Taint propagated from UNNAMED(UniquePcode[0x10000c0f]) to UNNAMED(UniquePcode[0x1000118a]) via CAST.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b84] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(s0) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b84] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b84] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b84] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b90] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(s0) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b90] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b90] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103b90] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(Register) via SUBPIECE.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d14] Taint propagated from pauVar19(x0) to UNNAMED(UniquePcode[0x10000cff]) via PTRSUB.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d14] Taint propagated from UNNAMED(UniquePcode[0x10000cff]) to UNNAMED(UniquePcode[0xe3c00]) via PTRADD.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d14] Taint propagated from UNNAMED(UniquePcode[0xe3c00]) to UNNAMED(UniquePcode[0x10000f96]) via CAST.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d30] Taint propagated from pauVar19(x0) to UNNAMED(UniquePcode[0x10000d27]) via PTRSUB.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d30] Taint propagated from UNNAMED(UniquePcode[0x10000d27]) to UNNAMED(UniquePcode[0xe3c00]) via PTRADD.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103d30] Taint propagated from UNNAMED(UniquePcode[0xe3c00]) to UNNAMED(UniquePcode[0x10000fa3]) via CAST.  
2025-07-10 10:23:19 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103df4] Taint propagated from UNNAMED(UniquePcode[0x6500]) to UNNAMED(x2) via LOAD.  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103ebc] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(x0) via SUBPIECE.  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00103ebc] Taint propagated from auVar40 (HighVar Repr) to UNNAMED(x1) via SUBPIECE.  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> 
--- Stage 1 Complete. Checking for pending multi-stage analysis tasks... ---  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> --- No multi-stage analysis tasks were queued. ---  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> 
--- Taint Analysis Run Complete ---  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> \n--- All Detected Tainted Value Usages (Interprocedural) ---  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> Usage #1:  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00103390  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00103ed0  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CALL (ram, 0x103370, 8) , (register, 0x4000, 8) , (register, 0x4008, 8)  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          TAINTED_ARG_TO_CALL_NO_PARAM_MAP_OR_VARARGS  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted PCode args (PCodeArg#0:UNNAMED(x0), PCodeArg#1:UNNAMED(x1)) to __stack_chk_fail (CALL) cannot map to HighProto (count 0).  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> INFO: TAINT_ANALYSIS_JSON_OUTPUT env var found. Saving results to: /Users/chenkexin/Desktop/kk/test_taint/results/mnist_mnn_console_taint_analysis_results.json  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> Taint analysis results saved to: /Users/chenkexin/Desktop/kk/test_taint/results/mnist_mnn_console_taint_analysis_results.json  
2025-07-10 10:23:20 INFO  (GhidraScript) mnn_analyzer.py> MNN Taint Analyzer finished.  
2025-07-10 10:23:20 INFO  (HeadlessAnalyzer) ANALYZING changes made by post scripts: file:///Users/chenkexin/Desktop/kk/test_taint/mnist_mnn_console  
2025-07-10 10:23:20 INFO  (HeadlessAnalyzer) REPORT: Post-analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/mnist_mnn_console  
2025-07-10 10:23:20 INFO  (HeadlessAnalyzer) REPORT: Save succeeded for: /mnist_mnn_console (HeadlessTaintAnalysis:/mnist_mnn_console)  
2025-07-10 10:23:20 INFO  (HeadlessAnalyzer) REPORT: Import succeeded  
2025-07-10 10:23:20 DEBUG (DefaultProjectData) Closing ProjectData: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/tmp.kINNX7UAvb/HeadlessTaintAnalysis.rep  
2025-07-10 10:23:20 DEBUG (DefaultProjectData) Disposing ProjectData: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/tmp.kINNX7UAvb/HeadlessTaintAnalysis.rep  
