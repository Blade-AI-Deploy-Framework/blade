2025-08-18 13:52:25 INFO  (LoggingInitialization) Using log config file: jar:file:/Applications/ghidra_11.0.3_PUBLIC/Ghidra/Framework/Generic/lib/Generic.jar!/generic.log4j.xml  
2025-08-18 13:52:25 INFO  (LoggingInitialization) Using log file: /Users/chenkexin/Desktop/kk/test_taint/logs/ssrnet_age_mnn_headless_analysis.log  
2025-08-18 13:52:25 INFO  (Preferences) Loading user preferences: /Users/chenkexin/.ghidra/.ghidra_11.0.3_PUBLIC/preferences  
2025-08-18 13:52:25 INFO  (Preferences) Loading previous preferences: /Users/chenkexin/.ghidra/.ghidra_10.4_PUBLIC/preferences  
2025-08-18 13:52:25 INFO  (ClassSearcher) Searching for classes...  
2025-08-18 13:52:26 INFO  (ClassSearcher) Class search complete (1635 ms)  
2025-08-18 13:52:26 INFO  (SSLContextInitializer) Initializing SSL Context  
2025-08-18 13:52:26 INFO  (SecureRandomFactory) Initializing Random Number Generator...  
2025-08-18 13:52:26 INFO  (SecureRandomFactory) Random Number Generator initialization complete: NativePRNGNonBlocking  
2025-08-18 13:52:26 INFO  (ApplicationTrustManagerFactory) Trust manager disabled, cacerts have not been set  
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer) HEADLESS Script Paths:
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/8051/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FileFormats/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Python/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/GnuDemangler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/SystemEmulation/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/MicrosoftCodeAnalyzer/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BytePatterns/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Decompiler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/Atmel/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-frida/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FunctionID/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/JVM/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/PIC/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BSim/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/PDB/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/DATA/ghidra_scripts
    /Users/chenkexin/ghidra_scripts
    /Users/chenkexin/Desktop/kk/test_taint
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-dbgmodel-traceloader/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-rmi-trace/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/VersionTracking/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger/ghidra_scripts  
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer) HEADLESS: execution starts  
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ssrnet_age_mnn  
2025-08-18 13:52:27 INFO  (DefaultProject) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ssrnet_age_mnn  
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer) REPORT: Processing input files:   
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer)      project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ssrnet_age_mnn  
2025-08-18 13:52:27 INFO  (HeadlessAnalyzer) IMPORTING: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ssrnet_age_mnn  
2025-08-18 13:52:30 INFO  (AutoImporter) Using Loader: Executable and Linking Format (ELF)  
2025-08-18 13:52:30 INFO  (AutoImporter) Using Language/Compiler: AARCH64:LE:64:v8A:default  
2025-08-18 13:52:30 DEBUG (ElfHeader) Elf symbol table section .dynsym linked to string table section .dynstr  
2025-08-18 13:52:30 DEBUG (ElfHeader) Elf symbol table section .symtab linked to string table section .strtab  
2025-08-18 13:52:30 DEBUG (ElfHeader) Elf relocation table section .rela.dyn linked to symbol table section .dynsym affecting PT_LOAD  
2025-08-18 13:52:30 DEBUG (ElfHeader) Elf relocation table section .rela.plt linked to symbol table section .dynsym affecting .got  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.3 at 00100253  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.7 at 001002cc  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.10 at 0010110b  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.12 at 00101184  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 8-byte alignment/filler segment_2.17 at 00101a38  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 16-byte alignment/filler segment_2.19 at 00101d30  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 12-byte alignment/filler segment_2.22 at 00102994  
2025-08-18 13:52:30 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.25 at 00102c54  
2025-08-18 13:52:31 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb70 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-08-18 13:52:31 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb80 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-18 13:52:31 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb98 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-18 13:52:31 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fbb0 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-18 13:52:31 INFO  (HeadlessAnalyzer) IMPORTING: Loaded 0 additional files  
2025-08-18 13:52:32 INFO  (HeadlessAnalyzer) ANALYZING all memory and code: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ssrnet_age_mnn  
2025-08-18 13:52:32 INFO  (ExternalDebugFilesService) DWARF external debug information found: ExternalDebugInfo [filename=null, crc=0, hash=82b1568a43c264ef9867a58441f79d3424823229]  
2025-08-18 13:52:32 INFO  (DWARFAnalyzer) Unable to find DWARF information, skipping DWARF analysis  
2025-08-18 13:52:34 INFO  (PackedDatabaseCache) Packed database cache: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache  
2025-08-18 13:52:34 DEBUG (PackedDatabaseCache) Using cached packed database: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-08-18 13:52:35 INFO  (ApplyDataArchiveAnalyzer) Applied data type archive: generic_clib_64  
2025-08-18 13:52:35 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121030: __cxxabiv1::__class_type_info::vtable  
2025-08-18 13:52:35 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121170: __cxxabiv1::__si_class_type_info::vtable  
2025-08-18 13:52:36 INFO  (AutoAnalysisManager) -----------------------------------------------------
    AARCH64 ELF PLT Thunks                     0.240 secs
    ASCII Strings                              0.300 secs
    Apply Data Archives                        1.164 secs
    Basic Constant Reference Analyzer          0.458 secs
    Call Convention ID                         0.196 secs
    Call-Fixup Installer                       0.011 secs
    Create Address Tables                      0.021 secs
    Create Address Tables - One Time           0.022 secs
    Create Function                            0.000 secs
    DWARF                                      0.013 secs
    Data Reference                             0.019 secs
    Decompiler Switch Analysis                 0.242 secs
    Demangler GNU                              0.252 secs
    Disassemble                                0.007 secs
    Disassemble Entry Points                   0.085 secs
    Embedded Media                             0.015 secs
    External Entry References                  0.001 secs
    Function Start Search                      0.057 secs
    Function Start Search After Code           0.023 secs
    Function Start Search After Data           0.007 secs
    Function Start Search delayed - One Time   0.004 secs
    GCC Exception Handlers                     0.871 secs
    Non-Returning Functions - Discovered       0.024 secs
    Non-Returning Functions - Known            0.018 secs
    Reference                                  0.068 secs
    Shared Return Calls                        0.021 secs
    Stack                                      0.258 secs
    Subroutine References                      0.018 secs
-----------------------------------------------------
     Total Time   4 secs
-----------------------------------------------------
  
2025-08-18 13:52:36 INFO  (HeadlessAnalyzer) REPORT: Analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ssrnet_age_mnn  
2025-08-18 13:52:36 INFO  (HeadlessAnalyzer) SCRIPT: /Users/chenkexin/Desktop/kk/test_taint/mnn_analyzer.py  
2025-08-18 13:52:41 INFO  (GhidraScript) mnn_analyzer.py> INFO: Searching for functions, thunks, and call sites related to keyword 'getSessionOutput'  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found function 'getSessionOutput'. Searching for its thunks.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00101b90 for function.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 001210c8 for function.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found 2 unique call sites. Analyzing each...  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Starting Stage 1 Taint Analysis from 'getSessionOutput' call sites ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1055644 at 00101b9c ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): getSessionOutput at 00101b90  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Call at 00101b9c has no output varnode. Nothing to taint. Skipping.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1056692 at 00101fb4 ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00101d40  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 00101fb4) ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x1000056e])  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00101d40 (Originating from: getSessionOutput) with initial taints: UNNAMED(UniquePcode[0x1000056e])  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Analyzing varnode: (unique, 0x1000056e, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Details: isAddress=0, addr=unique:1000056e, isStackAddress=0  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Def P-Code Op: (unique, 0x1000056e, 8) CALL (ram, 0x101b90, 8) , (unique, 0x10000566, 8) , (register, 0x4000, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Mnemonic 'CALL' is not a handled case. Aborting path.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x1000056e, 8) CALL (ram, 0x101b90, 8) , (unique, 0x10000566, 8) , (register, 0x4000, 8) at 00101fb4 in main, subsequent ops will be processed.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00101fb4] Taint propagated from UNNAMED(UniquePcode[0x1000056e]) to pTVar9(x0) via CAST.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x10000576, 8), Def_Op: (unique, 0x10000576, 8) CAST (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffdb0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x250  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x250. Calculated sink offset: -0x240  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_240' at offset -0x240.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 653: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 654: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 655: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 656: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 657: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 658: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 659: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 660: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 661: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 662: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 663: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 664: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 665: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 666: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 667: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 668: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 669: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 670: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 671: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 672: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 673: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 674: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 675: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 676: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 677: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 678: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 679: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 680: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 681: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 682: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 683: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 684: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1b3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 685: (unique, 0x10000576, 8) CAST (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 686:  ---  CALL (ram, 0x101c60, 8) , (register, 0x4000, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 687: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 688: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 689: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 690: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 691: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 692: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 693: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 694: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 695: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 696: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 697: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 698: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 699: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 700: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 701: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 702: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 703: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 704: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 705: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 706: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 707: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 708: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 709: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 710: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 711: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 712: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 713: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 714: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 715: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 716: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 717: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 718: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1b7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 719: (register, 0x5020, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000057e, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 720: (unique, 0x1000057e, 8) CAST (stack, 0xfffffffffffffdc0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 721: (unique, 0x10000338, 1) FLOAT_LESS (register, 0x5020, 4) , (const, 0x41900000, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 722:  ---  CBRANCH (ram, 0x101ff8, 1) , (unique, 0x10000338, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 723: (unique, 0x1000, 1) FLOAT_LESS (const, 0x420c0000, 4) , (register, 0x5020, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 724:  ---  CBRANCH (ram, 0x1020d4, 1) , (unique, 0x1000, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 725:  ---  CALL (ram, 0x101b00, 8) , (unique, 0x100003b3, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 726: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 727: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 728: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 729: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 730: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 731: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 732: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 733: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 734: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 735: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 736: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 737: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 738: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 739: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 740: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 741: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 742: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 743: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 744: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 745: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 746: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 747: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 748: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 749: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 750: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 751: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 752: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 753: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 754: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 755: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 756: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 757: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1dd, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 758: (unique, 0x100003b3, 8) COPY (const, 0x102a28, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 759: (stack, 0xfffffffffffffd98, 4) MULTIEQUAL (stack, 0xfffffffffffffd98, 4) , (stack, 0xfffffffffffffd98, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 760: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 761: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 762: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 763: (stack, 0xfffffffffffffdb8, 8) MULTIEQUAL (stack, 0xfffffffffffffdb8, 8) , (stack, 0xfffffffffffffdb8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 764: (stack, 0xfffffffffffffdc0, 8) MULTIEQUAL (stack, 0xfffffffffffffdc0, 8) , (stack, 0xfffffffffffffdc0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 765: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 766: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 767: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 768: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 769: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 770: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 771: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 772: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 773: (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 774: (stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 775: (stack, 0xfffffffffffffe50, 4) MULTIEQUAL (stack, 0xfffffffffffffe50, 4) , (stack, 0xfffffffffffffe50, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 776: (stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 777: (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 778: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 779: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 780: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 781: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 782: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 783: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 784: (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 785: (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 786: (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 787: (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 788: (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 789: (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 790: (ram, 0x121188, 8) MULTIEQUAL (ram, 0x121188, 8) , (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 791:  ---  CALL (ram, 0x101b40, 8) , (unique, 0x10000586, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 792: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 793: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 794: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 795: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 796: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 797: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 798: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 799: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 800: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 801: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 802: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 803: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 804: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 805: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 806: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 807: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 808: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 809: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 810: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 811: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 812: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 813: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 814: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 815: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 816: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 817: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 818: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 819: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 820: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 821: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 822: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 823: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1e0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 824: (unique, 0x10000586, 8) CAST (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 825:  ---  CALL (ram, 0x102780, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 826: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 827: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 828: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 829: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 830: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 831: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 832: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 833: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 834: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 835: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 836: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 837: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 838: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 839: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 840: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 841: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 842: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 843: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 844: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 845: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 846: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 847: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 848: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 849: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 850: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 851: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 852: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 853: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 854: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 855: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 856: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 857: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1e3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 858: (register, 0x4098, 8) COPY (const, 0x0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 859:  ---  CALL (ram, 0x101aa0, 8) , (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 860: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 861: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 862: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 863: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 864: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 865: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 866: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 867: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 868: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 869: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 870: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 871: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 872: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 873: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 874: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 875: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 876: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 877: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 878: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 879: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 880: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 881: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 882: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 883: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 884: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 885: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 886: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 887: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 888: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 889: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 890: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 891: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1e7, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 892:  ---  CALL (ram, 0x102590, 8) , (unique, 0x1000058e, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 893: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 894: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 895: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 896: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 897: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 898: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 899: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 900: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 901: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 902: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 903: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 904: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 905: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 906: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 907: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 908: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 909: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 910: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 911: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 912: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 913: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 914: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 915: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 916: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 917: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 918: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 919: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 920: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 921: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 922: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 923: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 924: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1ea, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 925: (unique, 0x1000058e, 8) CAST (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 926:  ---  CALL (ram, 0x102780, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 927: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 928: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 929: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 930: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 931: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 932: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 933: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 934: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 935: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 936: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 937: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 938: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 939: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 940: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 941: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 942: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 943: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 944: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 945: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 946: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 947: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 948: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 949: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 950: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 951: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 952: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 953: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 954: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 955: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 956: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 957: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 958: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1ed, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 959: (register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 960: (stack, 0xfffffffffffffd98, 4) MULTIEQUAL (stack, 0xfffffffffffffd98, 4) , (stack, 0xfffffffffffffd98, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 961: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 962: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 963: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 964: (stack, 0xfffffffffffffdb8, 8) MULTIEQUAL (stack, 0xfffffffffffffdb8, 8) , (stack, 0xfffffffffffffdb8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 965: (stack, 0xfffffffffffffdc0, 8) MULTIEQUAL (stack, 0xfffffffffffffdc0, 8) , (stack, 0xfffffffffffffdc0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 966: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 967: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 968: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 969: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 970: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 971: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 972: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 973: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 974: (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 975: (stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 976: (stack, 0xfffffffffffffe50, 4) MULTIEQUAL (stack, 0xfffffffffffffe50, 4) , (stack, 0xfffffffffffffe50, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 977: (stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 978: (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 979: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 980: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 981: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 982: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 983: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 984: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 985: (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 986: (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 987: (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 988: (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 989: (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 990: (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 991: (ram, 0x121188, 8) MULTIEQUAL (ram, 0x121188, 8) , (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 992:  ---  CALL (ram, 0x101aa0, 8) , (unique, 0x11f80, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 993: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 994: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 995: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 996: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 997: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 998: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 999: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1000: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1001: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1002: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1003: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1004: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1005: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1006: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1007: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1008: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1009: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1010: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1011: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1012: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1013: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1014: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1015: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1016: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1017: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1018: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1019: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1020: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1021: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1022: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1023: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1024: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1f0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1025:  ---  CALL (ram, 0x101cd0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1026: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1027: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1028: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1029: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1030: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1031: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1032: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1033: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1034: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1035: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1036: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1037: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1038: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1039: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1040: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1041: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1042: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1043: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1044: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1045: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1046: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1047: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1048: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1049: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1050: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1051: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1052: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1053: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1054: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1055: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1056: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1057: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1f3, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1058:  ---  CALL (ram, 0x101cd0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1059: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1060: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1061: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1062: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1063: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1064: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1065: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1066: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1067: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1068: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1069: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1070: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1071: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1072: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1073: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1074: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1075: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1076: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1077: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1078: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1079: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1080: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1081: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1082: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1083: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1084: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1085: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1086: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1087: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1088: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1089: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1090: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x1f6, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1091: (register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1092: (stack, 0xfffffffffffffd98, 4) MULTIEQUAL (stack, 0xfffffffffffffd98, 4) , (stack, 0xfffffffffffffd98, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1093: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1094: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1095: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1096: (stack, 0xfffffffffffffdb8, 8) MULTIEQUAL (stack, 0xfffffffffffffdb8, 8) , (stack, 0xfffffffffffffdb8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1097: (stack, 0xfffffffffffffdc0, 8) MULTIEQUAL (stack, 0xfffffffffffffdc0, 8) , (stack, 0xfffffffffffffdc0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1098: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1099: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1100: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1101: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1102: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1103: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1104: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1105: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1106: (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1107: (stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1108: (stack, 0xfffffffffffffe50, 4) MULTIEQUAL (stack, 0xfffffffffffffe50, 4) , (stack, 0xfffffffffffffe50, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1109: (stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1110: (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1111: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1112: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1113: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1114: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1115: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1116: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1117: (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1118: (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1119: (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1120: (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1121: (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1122: (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1123: (ram, 0x121188, 8) MULTIEQUAL (ram, 0x121188, 8) , (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1124: (unique, 0x3e480, 8) INT_SUB (stack, 0xffffffffffffff98, 8) , (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1125: (register, 0x108, 1) INT_EQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1126:  ---  CBRANCH (ram, 0x102130, 1) , (register, 0x108, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1127: (register, 0x4000, 8) COPY (register, 0x4098, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1128:  ---  RETURN (const, 0x0, 8) , (register, 0x4000, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1129: (ram, 0x121188, 8) COPY (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1130:  ---  CALL (ram, 0x101b20, 8) , (unique, 0x100004c6, 8) , (unique, 0x100003a3, 8) , (const, 0x16, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1131: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1132: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1133: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1134: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1135: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1136: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1137: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1138: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1139: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1140: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1141: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1142: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1143: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1144: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1145: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1146: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1147: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1148: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1149: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1150: (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1151: (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1152: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1153: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1154: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1155: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1156: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1157: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1158: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1159: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1160: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1161: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1162: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1163: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1164: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x270, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1165: (unique, 0x100003a3, 8) COPY (const, 0x102a08, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1166: (unique, 0x100003cb, 8) PTRSUB (const, 0x0, 8) , (const, 0x121078, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1167: (unique, 0x100004c6, 8) CAST (unique, 0x100003cb, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1168: (register, 0x4000, 8) CALL (ram, 0x101b20, 8) , (unique, 0x100004ce, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe90, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1169: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1170: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1171: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1172: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1173: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1174: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1175: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1176: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1177: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1178: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1179: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1180: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1181: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1182: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1183: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1184: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1185: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1186: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1187: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1188: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1189: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1190: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1191: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1192: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1193: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1194: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1195: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1196: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1197: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1198: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1199: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1200: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x27b, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1201: (unique, 0x100003d3, 8) PTRSUB (const, 0x0, 8) , (const, 0x121078, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1202: (unique, 0x100004ce, 8) CAST (unique, 0x100003d3, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1203:  ---  CALL (ram, 0x102420, 8) , (register, 0x4000, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1204: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1205: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1206: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1207: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1208: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1209: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1210: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1211: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1212: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1213: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1214: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1215: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1216: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1217: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1218: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1219: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1220: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1221: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1222: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1223: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1224: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1225: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1226: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1227: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1228: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1229: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1230: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1231: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1232: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1233: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1234: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1235: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x27d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1236: (register, 0x4098, 8) COPY (const, 0xffffffff, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1237:  ---  BRANCH (ram, 0x102040, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1238:  ---  CALL (ram, 0x101b00, 8) , (unique, 0x100003ab, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1239: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1240: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1241: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1242: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1243: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1244: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1245: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1246: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1247: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1248: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1249: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1250: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1251: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1252: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1253: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1254: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1255: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1256: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1257: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1258: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1259: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1260: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1261: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1262: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1263: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1264: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1265: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1266: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1267: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1268: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1269: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1270: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x261, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1271: (unique, 0x100003ab, 8) COPY (const, 0x102a20, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1272:  ---  BRANCH (ram, 0x102014, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1273:  ---  CALL (ram, 0x101b20, 8) , (unique, 0x1000048e, 8) , (unique, 0x10000393, 8) , (const, 0x7, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1274: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1275: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1276: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1277: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1278: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1279: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1280: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1281: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1282: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1283: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1284: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1285: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1286: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1287: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1288: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1289: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1290: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1291: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1292: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1293: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1294: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1295: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1296: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1297: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1298: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1299: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1300: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1301: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1302: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1303: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1304: (stack, 0xffffffffffffff98, 8) INDIRECT (register, 0x4008, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1305: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x28d, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1306: (unique, 0x10000393, 8) COPY (const, 0x1029e0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1307: (unique, 0x100003db, 8) PTRSUB (const, 0x0, 8) , (const, 0x121078, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1308: (unique, 0x1000048e, 8) CAST (unique, 0x100003db, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1309: (register, 0x4008, 8) LOAD (const, 0x1b1, 4) , (register, 0x4008, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1310: (register, 0x4000, 8) CALL (ram, 0x101c00, 8) , (unique, 0x10000496, 8) , (register, 0x4008, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1311: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1312: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1313: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1314: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1315: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1316: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1317: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1318: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1319: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1320: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1321: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1322: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1323: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1324: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1325: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1326: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1327: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1328: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1329: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1330: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1331: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1332: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1333: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1334: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1335: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1336: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1337: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1338: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1339: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1340: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1341: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1342: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x294, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1343: (unique, 0x100003e3, 8) PTRSUB (const, 0x0, 8) , (const, 0x121078, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1344: (unique, 0x10000496, 8) CAST (unique, 0x100003e3, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1345:  ---  CALL (ram, 0x101b20, 8) , (register, 0x4000, 8) , (unique, 0x1000039b, 8) , (const, 0x1a, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1346: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1347: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1348: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1349: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1350: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1351: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1352: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1353: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1354: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1355: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1356: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1357: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1358: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1359: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1360: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1361: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1362: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1363: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1364: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1365: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1366: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1367: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1368: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1369: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1370: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1371: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1372: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1373: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1374: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1375: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1376: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1377: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x2a0, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1378: (unique, 0x1000039b, 8) COPY (const, 0x1029e8, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1379: (register, 0x4098, 8) COPY (const, 0xffffffff, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1380:  ---  CALL (ram, 0x102420, 8) , (register, 0x4000, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1381: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1382: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1383: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1384: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1385: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1386: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1387: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1388: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1389: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1390: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1391: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1392: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1393: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1394: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1395: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1396: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1397: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1398: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1399: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1400: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1401: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1402: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1403: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1404: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1405: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1406: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1407: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1408: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1409: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1410: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1411: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1412: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x2a4, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1413:  ---  BRANCH (ram, 0x102068, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1414:  ---  CALL (ram, 0x101d10, 8) , (unique, 0x100003eb, 8) , (const, 0x0, 8) , (unique, 0x3e480, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1415:  ---  RETURN (const, 0x1, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1416: (stack, 0xfffffffffffffd98, 4) INDIRECT (stack, 0xfffffffffffffd98, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1417: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1418: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1419: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1420: (stack, 0xfffffffffffffdb8, 8) INDIRECT (stack, 0xfffffffffffffdb8, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1421: (stack, 0xfffffffffffffdc0, 8) INDIRECT (stack, 0xfffffffffffffdc0, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1422: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1423: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1424: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1425: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1426: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1427: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1428: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1429: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1430: (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1431: (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1432: (stack, 0xfffffffffffffe50, 4) INDIRECT (stack, 0xfffffffffffffe50, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1433: (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1434: (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1435: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1436: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1437: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1438: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1439: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1440: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1441: (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1442: (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1443: (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1444: (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1445: (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1446: (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1447: (ram, 0x121188, 8) INDIRECT (ram, 0x121188, 8) , (const, 0x240, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1448: (ram, 0x121188, 8) COPY (ram, 0x121188, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1449: (unique, 0x100003eb, 8) PTRSUB (const, 0x0, 8) , (const, 0x121188, 8)  
2025-08-18 13:52:42 ERROR (GhidraScript) mnn_analyzer.py> ERROR: [MNN_RULE] Found stack variable for sink, but could not find a subsequent COPY operation using it.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00101fe8. Address varnode: (unique, 0x1000057e, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x1000057e]) is not tainted (recursive check).  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x1000057e]) is not in the tainted memory regions set.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000338, 1) FLOAT_LESS (register, 0x5020, 4) , (const, 0x41900000, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00101ff0] Taint reached CBRANCH. Operands: ['UNNAMED(s1)', 'UnnamedHighVar(Constant: 0x41900000)'].   
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1000, 1) FLOAT_LESS (const, 0x420c0000, 4) , (register, 0x5020, 4)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102004] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x420c0000)', 'UNNAMED(s1)'].   
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102080] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3e480])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 0010209c] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (register, 0x4098, 8) at 00102088)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(UniquePcode[0x1000056e])  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. pTVar9(x0)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001020fc. Address varnode: (register, 0x4008, 8)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode param_2(x1) is not tainted (recursive check).  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer param_2(x1) is not in the tainted memory regions set.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Stage 1 Complete. Checking for pending multi-stage analysis tasks... ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> --- No multi-stage analysis tasks were queued. ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> 
--- Taint Analysis Run Complete ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> \n--- All Detected Tainted Value Usages (Interprocedural) ---  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> Usage #1:  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d40  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00101ff0  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x101ff8, 1) , (unique, 0x10000338, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10000338])  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> Usage #2:  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d40  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102004  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1020d4, 1) , (unique, 0x1000, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1000])  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> Usage #3:  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101d40  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102080  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102130, 1) , (register, 0x108, 1)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: TAINT_ANALYSIS_JSON_OUTPUT env var found. Saving results to: /Users/chenkexin/Desktop/kk/test_taint/results/ssrnet_age_mnn_taint_analysis_results.json  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> Taint analysis results saved to: /Users/chenkexin/Desktop/kk/test_taint/results/ssrnet_age_mnn_taint_analysis_results.json  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 00101fec for branch at 00101ff0  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 00102000 for branch at 00102004  
2025-08-18 13:52:42 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102080. Skipping.  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> SUCCESS: Hook configuration saved to: /Users/chenkexin/Desktop/kk/test_taint/results/ssrnet_age_mnn_hook_config.json  
2025-08-18 13:52:42 INFO  (GhidraScript) mnn_analyzer.py> MNN Taint Analyzer finished.  
2025-08-18 13:52:42 INFO  (HeadlessAnalyzer) ANALYZING changes made by post scripts: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ssrnet_age_mnn  
2025-08-18 13:52:42 INFO  (HeadlessAnalyzer) REPORT: Post-analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ssrnet_age_mnn  
2025-08-18 13:52:43 INFO  (HeadlessAnalyzer) REPORT: Save succeeded for: /ssrnet_age_mnn (ssrnet_age_mnn:/ssrnet_age_mnn)  
2025-08-18 13:52:43 INFO  (HeadlessAnalyzer) REPORT: Import succeeded  
2025-08-18 13:52:43 DEBUG (DefaultProjectData) Closing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ssrnet_age_mnn.rep  
2025-08-18 13:52:43 DEBUG (DefaultProjectData) Disposing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ssrnet_age_mnn.rep  
