2025-08-19 02:09:35 INFO  (LoggingInitialization) Using log config file: jar:file:/Applications/ghidra_11.0.3_PUBLIC/Ghidra/Framework/Generic/lib/Generic.jar!/generic.log4j.xml  
2025-08-19 02:09:35 INFO  (LoggingInitialization) Using log file: /Users/chenkexin/Desktop/kk/test_taint/logs/ultraface_detector_mnn_headless_analysis.log  
2025-08-19 02:09:35 INFO  (Preferences) Loading user preferences: /Users/chenkexin/.ghidra/.ghidra_11.0.3_PUBLIC/preferences  
2025-08-19 02:09:35 INFO  (Preferences) Loading previous preferences: /Users/chenkexin/.ghidra/.ghidra_10.4_PUBLIC/preferences  
2025-08-19 02:09:35 INFO  (ClassSearcher) Searching for classes...  
2025-08-19 02:09:37 INFO  (ClassSearcher) Class search complete (1992 ms)  
2025-08-19 02:09:37 INFO  (SSLContextInitializer) Initializing SSL Context  
2025-08-19 02:09:37 INFO  (SecureRandomFactory) Initializing Random Number Generator...  
2025-08-19 02:09:37 INFO  (SecureRandomFactory) Random Number Generator initialization complete: NativePRNGNonBlocking  
2025-08-19 02:09:37 INFO  (ApplicationTrustManagerFactory) Trust manager disabled, cacerts have not been set  
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer) HEADLESS Script Paths:
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/8051/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FileFormats/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Python/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/GnuDemangler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/SystemEmulation/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/MicrosoftCodeAnalyzer/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BytePatterns/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Decompiler/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/Atmel/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-frida/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/FunctionID/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/JVM/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/PIC/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/BSim/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/PDB/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Processors/DATA/ghidra_scripts
    /Users/chenkexin/ghidra_scripts
    /Users/chenkexin/Desktop/kk/test_taint
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-agent-dbgmodel-traceloader/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger-rmi-trace/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/VersionTracking/ghidra_scripts
    /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Debug/Debugger/ghidra_scripts  
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer) HEADLESS: execution starts  
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ultraface_detector_mnn  
2025-08-19 02:09:38 INFO  (DefaultProject) Creating project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ultraface_detector_mnn  
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer) REPORT: Processing input files:   
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer)      project: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ultraface_detector_mnn  
2025-08-19 02:09:38 INFO  (HeadlessAnalyzer) IMPORTING: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ultraface_detector_mnn  
2025-08-19 02:09:40 INFO  (AutoImporter) Using Loader: Executable and Linking Format (ELF)  
2025-08-19 02:09:40 INFO  (AutoImporter) Using Language/Compiler: AARCH64:LE:64:v8A:default  
2025-08-19 02:09:40 DEBUG (ElfHeader) Elf symbol table section .dynsym linked to string table section .dynstr  
2025-08-19 02:09:40 DEBUG (ElfHeader) Elf symbol table section .symtab linked to string table section .strtab  
2025-08-19 02:09:40 DEBUG (ElfHeader) Elf relocation table section .rela.dyn linked to symbol table section .dynsym affecting PT_LOAD  
2025-08-19 02:09:40 DEBUG (ElfHeader) Elf relocation table section .rela.plt linked to symbol table section .dynsym affecting .got  
2025-08-19 02:09:40 DEBUG (ElfProgramBuilder) Discarding 1-byte alignment/filler segment_2.3 at 00100253  
2025-08-19 02:09:40 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.7 at 001002cc  
2025-08-19 02:09:40 DEBUG (ElfProgramBuilder) Discarding 16-byte alignment/filler segment_2.16 at 00101e70  
2025-08-19 02:09:40 DEBUG (ElfProgramBuilder) Discarding 12-byte alignment/filler segment_2.19 at 00103804  
2025-08-19 02:09:40 DEBUG (ElfProgramBuilder) Discarding 4-byte alignment/filler segment_2.22 at 00103b1c  
2025-08-19 02:09:41 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb50 (External Location = _ZTVN10__cxxabiv117__class_type_infoE+0x10)  
2025-08-19 02:09:41 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb60 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-19 02:09:41 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb78 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-19 02:09:41 WARN  (ElfRelocationHandler) EXTERNAL Data Elf Relocation with offset: at 0011fb90 (External Location = _ZTVN10__cxxabiv120__si_class_type_infoE+0x10)  
2025-08-19 02:09:41 INFO  (HeadlessAnalyzer) IMPORTING: Loaded 0 additional files  
2025-08-19 02:09:42 INFO  (HeadlessAnalyzer) ANALYZING all memory and code: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ultraface_detector_mnn  
2025-08-19 02:09:42 INFO  (ExternalDebugFilesService) DWARF external debug information found: ExternalDebugInfo [filename=null, crc=0, hash=1e941cbb6b99812e51bd1148dc044afdaedf53f8]  
2025-08-19 02:09:42 INFO  (DWARFAnalyzer) Unable to find DWARF information, skipping DWARF analysis  
2025-08-19 02:09:44 INFO  (PackedDatabaseCache) Packed database cache: /var/folders/kn/fw_2jn054bq5f73czrm_91nc0000gn/T/chenkexin-Ghidra/packed-db-cache  
2025-08-19 02:09:44 DEBUG (PackedDatabaseCache) Using cached packed database: /Applications/ghidra_11.0.3_PUBLIC/Ghidra/Features/Base/data/typeinfo/generic/generic_clib_64.gdt  
2025-08-19 02:09:45 INFO  (ApplyDataArchiveAnalyzer) Applied data type archive: generic_clib_64  
2025-08-19 02:09:45 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121048: __cxxabiv1::__class_type_info::vtable  
2025-08-19 02:09:45 WARN  (DemangledAddressTable) Unable to fully apply external demangled Address Table at 00121190: __cxxabiv1::__si_class_type_info::vtable  
2025-08-19 02:09:46 INFO  (AutoAnalysisManager) -----------------------------------------------------
    AARCH64 ELF PLT Thunks                     0.164 secs
    ASCII Strings                              0.248 secs
    Apply Data Archives                        1.112 secs
    Basic Constant Reference Analyzer          0.667 secs
    Call Convention ID                         0.310 secs
    Call-Fixup Installer                       0.013 secs
    Create Address Tables                      0.026 secs
    Create Address Tables - One Time           0.026 secs
    Create Function                            0.000 secs
    DWARF                                      0.008 secs
    Data Reference                             0.019 secs
    Decompiler Switch Analysis                 0.241 secs
    Demangler GNU                              0.216 secs
    Disassemble                                0.009 secs
    Disassemble Entry Points                   0.069 secs
    Embedded Media                             0.014 secs
    External Entry References                  0.002 secs
    Function Start Search                      0.066 secs
    Function Start Search After Code           0.030 secs
    Function Start Search After Data           0.007 secs
    Function Start Search delayed - One Time   0.004 secs
    GCC Exception Handlers                     0.909 secs
    Non-Returning Functions - Discovered       0.028 secs
    Non-Returning Functions - Known            0.015 secs
    Reference                                  0.081 secs
    Shared Return Calls                        0.022 secs
    Stack                                      0.340 secs
    Subroutine References                      0.014 secs
-----------------------------------------------------
     Total Time   4 secs
-----------------------------------------------------
  
2025-08-19 02:09:46 INFO  (HeadlessAnalyzer) REPORT: Analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ultraface_detector_mnn  
2025-08-19 02:09:46 INFO  (HeadlessAnalyzer) SCRIPT: /Users/chenkexin/Desktop/kk/test_taint/mnn_analyzer.py  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Searching for functions, thunks, and call sites related to keyword 'getSessionOutput'  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found function 'getSessionOutput'. Searching for its thunks.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 00101cd0 for function.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found thunk 'getSessionOutput' at 001210e8 for function.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found 3 unique call sites. Analyzing each...  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> 
--- Starting Stage 1 Taint Analysis from 'getSessionOutput' call sites ---  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1055964 at 00101cdc ---  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): getSessionOutput at 00101cd0  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: Call at 00101cdc has no output varnode. Nothing to taint. Skipping.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1057032 at 00102108 ---  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00101e80  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 00102108) ---  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x10000b55])  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00101e80 (Originating from: getSessionOutput) with initial taints: UNNAMED(UniquePcode[0x10000b55])  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Analyzing varnode: (unique, 0x10000b55, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Details: isAddress=0, addr=unique:10000b55, isStackAddress=0  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Def P-Code Op: (unique, 0x10000b55, 8) CALL (ram, 0x101cd0, 8) , (unique, 0x10000b4d, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Mnemonic 'CALL' is not a handled case. Aborting path.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x10000b55, 8) CALL (ram, 0x101cd0, 8) , (unique, 0x10000b4d, 8) , (register, 0x4000, 8) at 00102108 in main, subsequent ops will be processed.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102108] Taint propagated from UNNAMED(UniquePcode[0x10000b55]) to pTVar18(x0) via CAST.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x10000b6d, 8), Def_Op: (unique, 0x10000b6d, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffd58, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x2a8  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x2a8. Calculated sink offset: -0x298  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_298' at offset -0x298.  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 793: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 794: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 795: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 796: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 797: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 798: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 799: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 800: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 801: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 802: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 803: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 804: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 805: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 806: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 807: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 808: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 809: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 810: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 811: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 812: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 813: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 814: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 815: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 816: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 817: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 818: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 819: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 820: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 821: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 822: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 823: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 824: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 825: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 826: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 827: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1db, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 828: (unique, 0x10000b6d, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 829:  ---  CALL (ram, 0x101da0, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 830: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 831: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 832: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 833: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 834: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 835: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 836: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 837: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 838: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 839: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 840: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 841: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 842: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 843: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 844: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 845: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 846: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 847: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 848: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 849: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 850: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 851: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 852: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 853: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 854: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 855: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 856: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 857: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 858: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 859: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 860: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 861: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 862: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 863: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 864: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1df, 4)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 865: (register, 0x4000, 4) CALL (ram, 0x101c70, 8)  
2025-08-19 02:09:51 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 866: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 867: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 868: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 869: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 870: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 871: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 872: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 873: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 874: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 875: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 876: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 877: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 878: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 879: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 880: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 881: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 882: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 883: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 884: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 885: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 886: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 887: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 888: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 889: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 890: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 891: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 892: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 893: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 894: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 895: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 896: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 897: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 898: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 899: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 900: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1e2, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 901:  ---  CALL (ram, 0x101c50, 8) , (unique, 0x10000b75, 8) , (register, 0x4000, 8) , (register, 0x4000, 4) , (const, 0x1, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 902: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 903: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 904: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 905: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 906: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 907: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 908: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 909: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 910: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 911: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 912: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 913: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 914: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 915: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 916: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 917: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 918: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 919: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 920: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 921: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 922: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 923: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 924: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 925: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 926: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 927: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 928: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 929: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 930: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 931: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 932: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 933: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 934: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 935: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 936: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 937: (unique, 0x10000b75, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 938:  ---  CALL (ram, 0x101da0, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 939: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 940: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 941: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 942: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 943: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 944: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 945: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 946: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 947: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 948: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 949: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 950: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 951: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 952: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 953: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 954: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 955: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 956: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 957: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 958: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 959: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 960: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 961: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 962: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 963: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 964: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 965: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 966: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 967: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 968: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 969: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 970: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 971: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 972: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 973: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 974: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 975:  ---  CALL (ram, 0x101b60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 976: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 977: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 978: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 979: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 980: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 981: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 982: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 983: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 984: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 985: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 986: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 987: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 988: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 989: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 990: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 991: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 992: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 993: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 994: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 995: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 996: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 997: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 998: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 999: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1000: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1001: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1002: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1003: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1004: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1005: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1006: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1007: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1008: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1009: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1010: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1011: (unique, 0x10000b85, 8) INT_ADD (unique, 0x10000b7d, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1012: (unique, 0x24900, 4) LOAD (const, 0x1b1, 4) , (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1013: (unique, 0x10000b7d, 8) CAST (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1014: (unique, 0x6400, 8) CAST (unique, 0x10000b85, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1015:  ---  CALL (ram, 0x103490, 8) , (unique, 0x10000b8d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1016: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1017: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1018: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1019: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1020: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1021: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1022: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1023: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1024: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1025: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1026: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1027: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1028: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1029: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1030: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1031: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1032: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1033: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1034: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1035: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1036: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1037: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1038: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1039: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1040: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1041: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1042: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1043: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1044: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1045: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1046: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1047: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1048: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1049: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1050: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1051: (unique, 0x10000975, 8) COPY (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1052: (unique, 0x10000b8d, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1053: (stack, 0xfffffffffffffcf0, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1054: (stack, 0xfffffffffffffcf8, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1055: (stack, 0xfffffffffffffd00, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1056: (unique, 0x1580, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1057:  ---  CBRANCH (ram, 0x1026dc, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1058: (unique, 0x10000b95, 8) INT_ADD (stack, 0xfffffffffffffd68, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1059: (unique, 0x11f80, 8) CAST (unique, 0x10000b95, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1060: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1061: (unique, 0x5f80, 8) INT_SEXT (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1062: (unique, 0x1000085f, 8) INT_MULT (unique, 0x5f80, 8) , (const, 0x2, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1063: (unique, 0x11800, 8) PTRADD (unique, 0x11f80, 8) , (unique, 0x1000085f, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1064: (register, 0x40a0, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1065: (register, 0x4008, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1066: (register, 0x5000, 4) LOAD (const, 0x1b1, 4) , (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1067: (register, 0x4008, 8) MULTIEQUAL (register, 0x4008, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1068: (register, 0x4098, 8) MULTIEQUAL (unique, 0x11f80, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1069: (register, 0x40a0, 8) MULTIEQUAL (register, 0x40a0, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1070: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1071: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1072: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1073: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1074: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1075: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1076: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1077: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1078: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1079: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1080: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1081: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1082: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1083: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1084: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1085: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1086: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1087: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1088: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1089: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1090: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1091: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1092: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1093: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1094: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1095: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1096: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1097: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1098: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1099: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1100: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1101: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1102: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1103: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1104: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1105: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1106: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1107: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1108: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3f000000, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1109:  ---  CBRANCH (ram, 0x102398, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1110: (unique, 0x100009bd, 8) COPY (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1111: (register, 0x4008, 8) MULTIEQUAL (unique, 0x100009bd, 8) , (unique, 0x100009c5, 8) , (unique, 0x100009cd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1112: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1113: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (unique, 0x11f80, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1114: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1115: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (register, 0x5000, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1116: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (register, 0x5008, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1117: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1118: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1119: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1120: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1121: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1122: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1123: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1124: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1125: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1126: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1127: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1128: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1129: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1130: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1131: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1132: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1133: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1134: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1135: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1136: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1137: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1138: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1139: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1140: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1141: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1142: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1143: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1144: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1145: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1146: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1147: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1148: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1149: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1150: (unique, 0x11f80, 8) PTRADD (register, 0x4098, 8) , (const, 0x2, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1151: (unique, 0x11b80, 4) INT_ADD (register, 0x40a0, 4) , (const, 0x4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1152: (register, 0x40a0, 8) INT_ZEXT (unique, 0x11b80, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1153: (register, 0x40a0, 4) SUBPIECE (register, 0x40a0, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1154: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (unique, 0x11800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1155:  ---  CBRANCH (ram, 0x1021e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1156: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1157: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1158: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1159: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1160: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1161: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1162: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1163: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1164: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1165: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1166: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1167: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1168: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1169: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1170: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1171: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1172: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1173: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1174: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1175: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1176: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1177: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1178: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1179: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1180: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1181: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1182: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1183: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1184: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1185: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1186: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1187: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1188: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1189: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1190: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1191: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1192: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1193: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1194: (stack, 0xfffffffffffffcd0, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1195: (unique, 0x10000965, 8) COPY (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1196: (unique, 0x1000096d, 8) COPY (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1197: (stack, 0xfffffffffffffd10, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1198: (stack, 0xfffffffffffffd18, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1199: (stack, 0xfffffffffffffd20, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1200: (register, 0x4090, 8) INT_SUB (unique, 0x10000bfd, 8) , (unique, 0x10000c05, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1201: (unique, 0x10000bfd, 8) CAST (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1202: (unique, 0x10000c05, 8) CAST (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1203: (register, 0x40a8, 8) INT_SRIGHT (register, 0x4090, 8) , (const, 0x2, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1204: (register, 0x40a8, 8) INT_MULT (register, 0x40a8, 8) , (const, 0xcccccccccccccccd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1205: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1206:  ---  CBRANCH (ram, 0x1026a4, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1207: (register, 0x4000, 8) LZCOUNT (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1208: (unique, 0x3d480, 4) INT_SUB (const, 0x3f, 4) , (register, 0x4000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1209: (register, 0x4010, 8) INT_ZEXT (unique, 0x3d480, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1210: (register, 0x4000, 4) SUBPIECE (register, 0x4000, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1211: (unique, 0x33c00, 8) INT_LEFT (register, 0x4010, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1212: (unique, 0x33c80, 8) INT_ZEXT (unique, 0x10000441, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1213: (unique, 0x33e80, 8) INT_2COMP (unique, 0x33c80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1214: (unique, 0x33f80, 8) INT_AND (unique, 0x33e80, 8) , (const, 0xfffffffe00000000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1215: (register, 0x4010, 8) INT_OR (unique, 0x33f80, 8) , (unique, 0x33c00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1216: (unique, 0x10000441, 4) INT_RIGHT (unique, 0x3d480, 4) , (const, 0x1f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1217:  ---  CALL (ram, 0x102cd0, 8) , (register, 0x4000, 4) , (register, 0x4008, 4) , (register, 0x4010, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1218: (register, 0x4000, 4) SUBPIECE (stack, 0xfffffffffffffcf0, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1219: (register, 0x4008, 4) SUBPIECE (stack, 0xfffffffffffffcf8, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1220: (register, 0x4010, 8) INDIRECT (register, 0x4010, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1221: (register, 0x4090, 8) INDIRECT (const, 0x0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1222: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1223: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1224: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1225: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1226: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1227: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1228: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1229: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1230: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1231: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1232: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1233: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1234: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1235: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1236: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1237: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1238: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1239: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1240: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1241: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1242: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1243: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1244: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1245: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1246: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1247: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1248: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1249: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1250: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1251: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1252: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1253: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1254: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1255: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1256: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1257: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1258: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1259: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1260: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1261: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1262: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x2b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1263: (unique, 0x1580, 1) INT_SLESS (register, 0x4090, 8) , (const, 0x141, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1264:  ---  CBRANCH (ram, 0x102420, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1265: (register, 0x4010, 4) SUBPIECE (register, 0x4010, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1266: (unique, 0x11f80, 8) PTRADD (unique, 0x10000965, 8) , (const, 0x28, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1267:  ---  CALL (ram, 0x102fd0, 8) , (register, 0x4000, 4) , (register, 0x4008, 4) , (register, 0x4010, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1268: (register, 0x4008, 4) SUBPIECE (unique, 0x11f80, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1269: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1270: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1271: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1272: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1273: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1274: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1275: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1276: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1277: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1278: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1279: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1280: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1281: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1282: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1283: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1284: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1285: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1286: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1287: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1288: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1289: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1290: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1291: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1292: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1293: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1294: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1295: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1296: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1297: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1298: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1299: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1300: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1301: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1302: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1303: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1304: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1305: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1306: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1307: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1308: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1309: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x2cc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1310: (unique, 0x10000947, 1) INT_NOTEQUAL (unique, 0x1000096d, 8) , (unique, 0x1000093f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1311:  ---  CBRANCH (ram, 0x1022b0, 1) , (unique, 0x10000947, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1312: (unique, 0x1000093f, 8) MULTIEQUAL (unique, 0x11f80, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1313: (unique, 0x10000948, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1314: (unique, 0x100009ad, 8) COPY (unique, 0x1000093f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1315: (unique, 0x24380, 8) LOAD (const, 0x1b1, 4) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1316: (unique, 0x24500, 8) LOAD (const, 0x1b1, 4) , (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1317: (register, 0x4008, 8) MULTIEQUAL (unique, 0x100009ad, 8) , (unique, 0x100009b5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1318: (ram, 0x1211a8, 8) MULTIEQUAL (unique, 0x10000948, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1319: (unique, 0x24400, 8) PTRADD (register, 0x4008, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1320: (unique, 0x10000c35, 8) INT_ADD (unique, 0x10000c2d, 8) , (const, 0xffffffffffffffec, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1321: (unique, 0x10000c2d, 8) CAST (unique, 0x100006b4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1322: (register, 0x4000, 8) CAST (unique, 0x10000c35, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1323: (unique, 0x24900, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c0d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1324: (unique, 0x6400, 8) PTRADD (register, 0x4008, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1325: (unique, 0x10000c0d, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1326: (unique, 0x10000c1d, 8) INT_ADD (unique, 0x10000c15, 8) , (const, 0xfffffffffffffffc, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1327: (register, 0x5000, 4) LOAD (const, 0x1b1, 4) , (unique, 0x6980, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1328: (unique, 0x10000c15, 8) CAST (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1329: (unique, 0x6980, 8) CAST (unique, 0x10000c1d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1330: (register, 0x5020, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c25, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1331: (unique, 0x6400, 8) PTRADD (register, 0x4008, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1332: (unique, 0x10000c25, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1333: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1334:  ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1335: (unique, 0x100009e5, 8) COPY (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1336: (unique, 0x10000a3d, 8) COPY (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1337:  ---  STORE (const, 0x1b1, 4) , (register, 0x4008, 8) , (unique, 0x24380, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1338:  ---  STORE (const, 0x1b1, 4) , (unique, 0x3a300, 8) , (unique, 0x24500, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1339: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x311, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1340: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x313, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1341: (unique, 0x3a300, 8) PTRADD (register, 0x4008, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1342: (unique, 0x10000cb5, 8) INT_ADD (unique, 0x10000cad, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1343: (unique, 0x10000cad, 8) CAST (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1344: (unique, 0x11f80, 8) CAST (unique, 0x10000cb5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1345:  ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cbd, 8) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1346: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x31f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1347: (unique, 0x6400, 8) PTRADD (register, 0x4008, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1348: (unique, 0x10000cbd, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1349: (register, 0x108, 1) INT_EQUAL (unique, 0x1000096d, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1350:  ---  CBRANCH (ram, 0x102268, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1351: (unique, 0x100009b5, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1352: (unique, 0x11f80, 8) INT_ADD (register, 0x40a8, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1353: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1354: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1355: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1356: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1357: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1358: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1359: (stack, 0xfffffffffffffd30, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1360: (stack, 0xfffffffffffffd38, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1361: (stack, 0xfffffffffffffd40, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1362: (stack, 0xfffffffffffffd48, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1363: (stack, 0xfffffffffffffd50, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1364: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1365: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1366: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1367: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1368: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1369: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1370: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1371: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1372: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1373: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1374: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1375: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1376: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1377: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1378: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1379: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1380: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1381: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1382: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1383: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1384: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1385: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1386: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1387: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1388: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1389: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1390: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1391: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1392: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1393: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1394: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1395: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (unique, 0x10000948, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1396: (register, 0x4000, 8) INT_RIGHT (unique, 0x11f80, 8) , (const, 0x6, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1397: (register, 0x40a0, 8) INT_MULT (register, 0x4000, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1398: (register, 0x4000, 8) CALL (ram, 0x101cc0, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1399: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1400: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1401: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1402: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1403: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1404: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1405: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1406: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1407: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1408: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1409: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1410: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1411: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1412: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1413: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1414: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1415: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1416: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1417: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1418: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1419: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1420: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1421: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1422: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1423: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1424: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1425: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1426: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1427: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1428: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1429: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1430: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1431: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1432: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1433: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1434: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1435: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1436: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1437: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1438: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1439: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1440: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1441: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x349, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1442: (register, 0x107, 1) INT_SLESS (unique, 0x10000cc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1443: (unique, 0x1000047d, 8) INT_MULT (register, 0x40a8, 8) , (const, 0x3333333333333333, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1444: (unique, 0x10000cc5, 8) CAST (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1445: (unique, 0x10000cd5, 8) INT_ADD (unique, 0x10000ccd, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1446: (unique, 0x10000ccd, 8) CAST (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1447: (unique, 0x12480, 8) CAST (unique, 0x10000cd5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1448: (unique, 0x36300, 8) INT_SDIV (unique, 0x10000cdd, 8) , (const, 0x40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1449: (unique, 0x10000cdd, 8) CAST (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1450: (unique, 0x10000ced, 8) INT_AND (unique, 0x10000ce5, 8) , (const, 0xffffffff00000000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1451: (unique, 0x10000ce5, 8) CAST (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1452: (stack, 0xfffffffffffffd38, 8) CAST (unique, 0x10000ced, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1453: (register, 0x4018, 8) INT_AND (unique, 0x1000047d, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1454: (register, 0x4000, 8) INT_AND (register, 0x40a8, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1455:  ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1456: (unique, 0x1f000, 8) INT_2COMP (register, 0x4018, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1457: (unique, 0x1f000, 8) MULTIEQUAL (register, 0x4000, 8) , (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1458: (unique, 0x4400, 8) INT_MULT (unique, 0x36300, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1459: (unique, 0x10000cfd, 8) INT_ADD (unique, 0x10000cf5, 8) , (unique, 0x4400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1460: (unique, 0x10000cf5, 8) CAST (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1461: (unique, 0x12480, 8) CAST (unique, 0x10000cfd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1462: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d05, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1463:  ---  CBRANCH (ram, 0x1026c0, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1464: (unique, 0x10000d05, 8) CAST (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1465: (register, 0x4018, 8) MULTIEQUAL (unique, 0x1f000, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1466: (register, 0x4020, 8) MULTIEQUAL (unique, 0x12480, 8) , (register, 0x4020, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1467: (register, 0x4018, 4) SUBPIECE (register, 0x4018, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1468: (stack, 0xfffffffffffffd4c, 4) SUBPIECE (stack, 0xfffffffffffffd48, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1469: (stack, 0xfffffffffffffd48, 8) PIECE (stack, 0xfffffffffffffd4c, 4) , (register, 0x4018, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1470:  ---  CALL (ram, 0x101bd0, 8) , (register, 0x4000, 8) , (const, 0x0, 4) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1471: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1472: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1473: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1474: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1475: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1476: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1477: (stack, 0xfffffffffffffd30, 8) INDIRECT (unique, 0x10000a55, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1478: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1479: (stack, 0xfffffffffffffd40, 8) INDIRECT (register, 0x4020, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1480: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1481: (stack, 0xfffffffffffffd50, 8) INDIRECT (unique, 0x12480, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1482: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1483: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1484: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1485: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1486: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1487: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1488: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1489: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1490: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1491: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1492: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1493: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1494: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1495: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1496: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1497: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1498: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1499: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1500: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1501: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1502: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1503: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1504: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1505: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1506: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1507: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1508: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1509: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1510: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1511: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1512: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1513: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x385, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1514: (unique, 0x10000a55, 8) COPY (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1515: (register, 0x40b0, 8) MULTIEQUAL (register, 0x4000, 8) , (register, 0x40b0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1516: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1517: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1518: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1519: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1520: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1521: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1522: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1523: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1524: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1525: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1526: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1527: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1528: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1529: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1530: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1531: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1532: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1533: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1534: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1535: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1536: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1537: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1538: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1539: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1540: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1541: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1542: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1543: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1544: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1545: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1546: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1547: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1548: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1549: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1550: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1551: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1552: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1553: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1554: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1555: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1556: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1557: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1558: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1559: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1560: (register, 0x40a0, 8) COPY (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1561: (register, 0x4008, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1562: (unique, 0x1000099d, 8) COPY (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1563: (unique, 0x10000a05, 8) COPY (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1564: (unique, 0x3df80, 8) INT_SUB (register, 0x40a0, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1565: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000d1d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1566: (register, 0x4008, 8) MULTIEQUAL (unique, 0x1000099d, 8) , (unique, 0x100009a5, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1567: (register, 0x4098, 8) MULTIEQUAL (unique, 0x10000965, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1568: (register, 0x40a0, 8) MULTIEQUAL (unique, 0x10000a05, 8) , (unique, 0x10000a0d, 8) , (unique, 0x10000a15, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1569: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1570: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1571: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1572: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1573: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1574: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1575: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1576: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1577: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1578: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1579: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1580: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1581: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1582: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1583: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1584: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1585: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1586: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1587: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1588: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1589: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1590: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1591: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1592: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1593: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1594: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1595: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1596: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1597: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1598: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1599: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1600: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1601: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1602: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1603: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1604: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1605: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1606: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1607: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1608: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1609: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1610: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1611: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1612: (unique, 0x10000d1d, 8) CAST (unique, 0x3df80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1613: (unique, 0x11f80, 8) INT_ADD (register, 0x40a0, 8) , (const, 0x3e, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1614:  ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1615: (unique, 0x1df00, 8) MULTIEQUAL (unique, 0x1000098d, 8) , (unique, 0x10000995, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1616: (unique, 0x1000098d, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1617: (unique, 0x10000995, 8) COPY (unique, 0x3df80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1618: (register, 0x107, 1) INT_SLESS (unique, 0x10000d25, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1619: (unique, 0x100004b5, 8) INT_2COMP (unique, 0x3df80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1620: (unique, 0x10000d25, 8) CAST (unique, 0x3df80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1621: (register, 0x4010, 8) INT_AND (unique, 0x100004b5, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1622: (register, 0x4018, 8) INT_AND (unique, 0x3df80, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1623: (register, 0x4000, 8) INT_SRIGHT (unique, 0x10000d2d, 8) , (const, 0x6, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1624: (unique, 0x10000d2d, 8) CAST (unique, 0x1df00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1625:  ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1626: (unique, 0x1f000, 8) INT_2COMP (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1627: (unique, 0x1f000, 8) MULTIEQUAL (register, 0x4018, 8) , (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1628: (unique, 0x4400, 8) INT_MULT (register, 0x4000, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1629: (unique, 0x10000d3d, 8) INT_ADD (unique, 0x10000d35, 8) , (unique, 0x4400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1630: (unique, 0x10000d35, 8) CAST (register, 0x40b0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1631: (unique, 0x12480, 8) CAST (unique, 0x10000d3d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1632: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d45, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1633:  ---  CBRANCH (ram, 0x102370, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1634: (unique, 0x10000d45, 8) CAST (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1635: (unique, 0x11f80, 8) INT_ADD (unique, 0x1f000, 8) , (const, 0x40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1636: (register, 0x4000, 8) PTRADD (unique, 0x12480, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1637: (register, 0x4000, 8) LOAD (const, 0x1b1, 4) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1638: (register, 0x4000, 8) MULTIEQUAL (unique, 0x12480, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1639: (register, 0x4010, 8) MULTIEQUAL (unique, 0x1f000, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1640: (unique, 0x27c00, 8) INT_AND (register, 0x4010, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1641: (register, 0x4010, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x27c00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1642: (unique, 0x3ff00, 8) INT_AND (register, 0x4010, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1643: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1644:  ---  CBRANCH (ram, 0x102524, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1645: (unique, 0x10000d55, 8) INT_ADD (unique, 0x10000d4d, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1646: (unique, 0x10000d4d, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1647: (unique, 0x11f80, 8) CAST (unique, 0x10000d55, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1648: (unique, 0x11f80, 8) INT_ADD (register, 0x40a0, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1649: (register, 0x105, 1) INT_LESS (register, 0x40a0, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1650:  ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1651: (unique, 0x10000a15, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1652: (unique, 0x33c00, 8) INT_LEFT (register, 0x40a0, 8) , (const, 0x2, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1653: (unique, 0x33c80, 8) INT_RIGHT (register, 0x40a0, 8) , (const, 0x1f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1654: (unique, 0x33e80, 8) INT_2COMP (unique, 0x33c80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1655: (unique, 0x33f80, 8) INT_AND (unique, 0x33e80, 8) , (const, 0xfffffffc00000000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1656: (register, 0x4000, 8) INT_OR (unique, 0x33f80, 8) , (unique, 0x33c00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1657: (unique, 0x10000ba5, 8) INT_ADD (unique, 0x10000b9d, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1658: (register, 0x5028, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000239, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1659: (register, 0x5020, 8) LOAD (const, 0x1b1, 4) , (unique, 0x7ee00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1660: (unique, 0x10000239, 8) PTRADD (unique, 0x7ee00, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1661: (unique, 0x10000b9d, 8) CAST (unique, 0x10000975, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1662: (unique, 0x7ee00, 8) CAST (unique, 0x10000ba5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1663: (stack, 0xfffffffffffffd44, 4) SUBPIECE (stack, 0xfffffffffffffd40, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1664: (unique, 0x10000bad, 8) PIECE (stack, 0xfffffffffffffd44, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1665: (stack, 0xfffffffffffffd40, 8) CAST (unique, 0x10000bad, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1666: (register, 0x5000, 4) FLOAT_MULT (register, 0x5020, 4) , (register, 0x5100, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1667: (register, 0x5004, 4) FLOAT_MULT (register, 0x5024, 4) , (register, 0x5120, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1668: (register, 0x5008, 4) FLOAT_MULT (register, 0x5028, 4) , (register, 0x5100, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1669: (register, 0x500c, 4) FLOAT_MULT (register, 0x502c, 4) , (register, 0x5120, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1670: (unique, 0x10000bbd, 8) PIECE (register, 0x5004, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1671: (unique, 0x10000bcd, 8) PIECE (register, 0x500c, 4) , (register, 0x5008, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1672: (register, 0x5020, 4) SUBPIECE (register, 0x5020, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1673: (register, 0x5024, 4) SUBPIECE (unique, 0x10000955, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1674: (register, 0x5028, 4) SUBPIECE (register, 0x5028, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1675: (register, 0x502c, 4) SUBPIECE (unique, 0x1000095d, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1676: (unique, 0x10000955, 8) INT_RIGHT (unique, 0x10000bb5, 8) , (const, 0x20, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1677: (unique, 0x1000095d, 8) INT_RIGHT (unique, 0x10000bc5, 8) , (const, 0x20, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1678: (unique, 0x10000bb5, 8) CAST (register, 0x5020, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1679: (register, 0x5000, 8) CAST (unique, 0x10000bbd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1680: (unique, 0x10000bc5, 8) CAST (register, 0x5028, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1681: (register, 0x5008, 8) CAST (unique, 0x10000bcd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1682: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd00, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1683:  ---  CBRANCH (ram, 0x10267c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1684:  ---  STORE (const, 0x1b1, 4) , (register, 0x4008, 8) , (register, 0x5000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1685:  ---  STORE (const, 0x1b1, 4) , (unique, 0x3a300, 8) , (register, 0x5008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1686: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x75e, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1687: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x760, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1688: (unique, 0x3a300, 8) PTRADD (register, 0x4008, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1689: (unique, 0x10000bed, 8) INT_ADD (unique, 0x10000be5, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1690: (unique, 0x10000be5, 8) CAST (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1691: (unique, 0x11f80, 8) CAST (unique, 0x10000bed, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1692:  ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bf5, 8) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1693: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x76d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1694: (unique, 0x6980, 8) PTRADD (register, 0x4008, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1695: (unique, 0x10000bf5, 8) CAST (unique, 0x6980, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1696:  ---  BRANCH (ram, 0x1021ec, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1697: (unique, 0x100009c5, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1698: (unique, 0x24380, 8) LOAD (const, 0x1b1, 4) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1699: (unique, 0x10000c45, 8) INT_ADD (unique, 0x10000c3d, 8) , (const, 0xfffffffffffffff4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1700: (unique, 0x24500, 8) LOAD (const, 0x1b1, 4) , (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1701: (register, 0x4010, 8) MULTIEQUAL (unique, 0x100009e5, 8) , (unique, 0x100009ed, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1702: (unique, 0x10000a4d, 8) MULTIEQUAL (unique, 0x10000a3d, 8) , (unique, 0x10000a45, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1703: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1704: (unique, 0x100006b4, 8) COPY (unique, 0x10000a4d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1705: (unique, 0x10000c3d, 8) CAST (unique, 0x100006b4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1706: (unique, 0x24400, 8) CAST (unique, 0x10000c45, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1707:  ---  STORE (const, 0x1b1, 4) , (register, 0x4010, 8) , (unique, 0x24380, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1708:  ---  STORE (const, 0x1b1, 4) , (unique, 0x3a300, 8) , (unique, 0x24500, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1709: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x69f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1710: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6a1, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1711: (unique, 0x3a300, 8) PTRADD (register, 0x4010, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1712: (unique, 0x10000c55, 8) INT_ADD (unique, 0x10000c4d, 8) , (const, 0xfffffffffffffffc, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1713: (unique, 0x24900, 4) LOAD (const, 0x1b1, 4) , (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1714: (unique, 0x10000c4d, 8) CAST (unique, 0x100006b4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1715: (unique, 0x6400, 8) CAST (unique, 0x10000c55, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1716: (unique, 0x10000c65, 8) INT_ADD (unique, 0x10000c5d, 8) , (const, 0xffffffffffffffec, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1717: (unique, 0x10000c5d, 8) CAST (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1718: (register, 0x4010, 8) CAST (unique, 0x10000c65, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1719:  ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c6d, 8) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1720: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6a8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1721: (unique, 0x6400, 8) PTRADD (register, 0x4010, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1722: (unique, 0x10000c6d, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1723: (register, 0x5000, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c75, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1724: (unique, 0x6980, 8) PTRADD (unique, 0x100006b4, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1725: (unique, 0x10000c75, 8) CAST (unique, 0x6980, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1726: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1727:  ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1728: (unique, 0x100009ed, 8) COPY (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1729: (unique, 0x10000a45, 8) COPY (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1730:  ---  STORE (const, 0x1b1, 4) , (register, 0x4000, 8) , (unique, 0x24380, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1731: (unique, 0x10000c85, 8) INT_ADD (unique, 0x10000c7d, 8) , (const, 0xfffffffffffffff4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1732:  ---  STORE (const, 0x1b1, 4) , (unique, 0x3a300, 8) , (unique, 0x24500, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1733: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6c9, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1734: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6cb, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1735: (unique, 0x10000c7d, 8) CAST (unique, 0x100006b4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1736: (unique, 0x3a300, 8) CAST (unique, 0x10000c85, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1737: (unique, 0x10000ca5, 8) INT_ADD (unique, 0x10000c9d, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1738: (unique, 0x10000c9d, 8) CAST (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1739: (unique, 0x11f80, 8) CAST (unique, 0x10000ca5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1740: (unique, 0x10000c95, 8) INT_ADD (unique, 0x10000c8d, 8) , (const, 0xfffffffffffffffc, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1741:  ---  STORE (const, 0x1b1, 4) , (unique, 0x6400, 8) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1742: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6d7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1743: (unique, 0x10000c8d, 8) CAST (unique, 0x100006b4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1744: (unique, 0x6400, 8) CAST (unique, 0x10000c95, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1745:  ---  CALL (ram, 0x102fd0, 8) , (register, 0x4000, 4) , (register, 0x4008, 4) , (register, 0x4010, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1746: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1747: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1748: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1749: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1750: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1751: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1752: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1753: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1754: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1755: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1756: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1757: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1758: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1759: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1760: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1761: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1762: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1763: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1764: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1765: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1766: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1767: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1768: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1769: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1770: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1771: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1772: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1773: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1774: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1775: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1776: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1777: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1778: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1779: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1780: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1781: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1782: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1783: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1784: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1785: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1786: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x6e7, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1787: (stack, 0xfffffffffffffd30, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1788: (stack, 0xfffffffffffffd38, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1789: (stack, 0xfffffffffffffd40, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1790: (stack, 0xfffffffffffffd48, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1791: (stack, 0xfffffffffffffd50, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1792: (unique, 0x18e80, 1) INT_EQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1793:  ---  CBRANCH (ram, 0x1022bc, 1) , (unique, 0x18e80, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1794: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1795: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1796: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1797: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1798: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1799: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1800: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1801: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1802: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1803: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1804: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1805: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1806: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1807: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1808: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1809: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1810: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1811: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1812: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1813: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1814: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1815: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1816: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1817: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1818: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1819: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1820: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1821: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1822: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1823: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1824: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1825: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1826: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1827: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1828: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1829: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1830: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1831: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1832: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1833: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1834: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1835: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1836: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1837: (stack, 0xfffffffffffffcb0, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1838:  ---  CALL (ram, 0x103770, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1839: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1840: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1841: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1842: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1843: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1844: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1845: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1846: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1847: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1848: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1849: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1850: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1851: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1852: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1853: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1854: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1855: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1856: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1857: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1858: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1859: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1860: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1861: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1862: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1863: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1864: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1865: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1866: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1867: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1868: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1869: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1870: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1871: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1872: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1873: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1874: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1875: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1876: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1877: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1878: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1879: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1880: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1881: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x404, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1882: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1883:  ---  CBRANCH (ram, 0x102470, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1884: (register, 0x5020, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d8d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1885: (unique, 0x6400, 8) PTRADD (stack, 0xfffffffffffffd10, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1886: (unique, 0x10000d8d, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1887: (unique, 0x1400, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (const, 0x3f4ccccd, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1888:  ---  CBRANCH (ram, 0x1026cc, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1889:  ---  CALL (ram, 0x101c40, 8) , (unique, 0x1000078f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1890: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1891: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1892: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1893: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1894: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1895: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1896: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1897: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1898: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1899: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1900: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1901: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1902: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1903: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1904: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1905: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1906: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1907: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1908: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1909: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1910: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1911: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1912: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1913: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1914: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1915: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1916: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1917: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1918: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1919: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1920: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1921: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1922: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1923: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1924: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1925: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1926: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1927: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1928: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1929: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1930: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1931: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1932: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x43d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1933: (unique, 0x1000078f, 8) COPY (const, 0x1038c8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1934: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1935: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1936: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1937: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1938: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1939: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1940: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1941: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1942: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1943: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1944: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1945: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1946: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1947: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1948: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1949: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1950: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1951: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1952: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1953: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1954: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1955: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1956: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1957: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1958: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1959: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1960: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1961: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1962: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1963: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1964: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1965: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1966: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1967: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1968: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1969: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1970: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1971: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1972: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1973: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1974: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1975: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1976: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1977: (register, 0x4098, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1978:  ---  CALL (ram, 0x1035c0, 8) , (unique, 0x10000d95, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1979: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1980: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1981: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1982: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1983: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1984: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1985: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1986: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1987: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1988: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1989: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1990: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1991: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1992: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1993: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1994: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1995: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1996: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1997: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1998: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1999: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2000: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2001: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2002: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2003: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2004: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2005: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2006: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2007: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2008: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2009: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2010: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2011: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2012: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2013: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2014: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2015: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2016: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2017: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2018: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2019: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2020: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2021: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x442, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2022: (unique, 0x10000d95, 8) CAST (stack, 0xfffffffffffffcb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2023:  ---  CALL (ram, 0x1035c0, 8) , (unique, 0x10000d9d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2024: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2025: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2026: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2027: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2028: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2029: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2030: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2031: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2032: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2033: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2034: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2035: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2036: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2037: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2038: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2039: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2040: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2041: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2042: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2043: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2044: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2045: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2046: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2047: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2048: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2049: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2050: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2051: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2052: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2053: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2054: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2055: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2056: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2057: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2058: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2059: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2060: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2061: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2062: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2063: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2064: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2065: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2066: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x446, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2067: (unique, 0x10000d9d, 8) CAST (stack, 0xfffffffffffffcd0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2068:  ---  CALL (ram, 0x101c80, 8) , (unique, 0x10000da5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2069: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2070: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2071: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2072: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2073: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2074: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2075: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2076: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2077: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2078: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2079: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2080: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2081: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2082: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2083: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2084: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2085: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2086: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2087: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2088: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2089: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2090: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2091: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2092: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2093: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2094: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2095: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2096: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2097: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2098: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2099: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2100: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2101: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2102: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2103: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2104: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2105: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2106: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2107: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2108: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2109: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2110: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2111: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x449, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2112: (unique, 0x10000da5, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2113:  ---  CALL (ram, 0x101c80, 8) , (unique, 0x10000dad, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2114: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2115: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2116: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2117: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2118: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2119: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2120: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2121: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2122: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2123: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2124: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2125: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2126: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2127: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2128: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2129: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2130: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2131: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2132: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2133: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2134: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2135: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2136: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2137: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2138: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2139: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2140: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2141: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2142: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2143: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2144: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2145: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2146: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2147: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2148: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2149: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2150: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2151: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2152: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2153: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2154: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2155: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2156: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x44d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2157: (unique, 0x10000dad, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2158:  ---  CALL (ram, 0x1033f0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2159: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2160: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2161: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2162: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2163: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2164: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2165: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2166: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2167: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2168: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2169: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2170: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2171: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2172: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2173: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2174: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2175: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2176: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2177: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2178: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2179: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2180: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2181: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2182: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2183: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2184: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2185: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2186: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2187: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2188: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2189: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2190: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2191: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2192: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2193: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2194: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2195: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2196: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2197: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2198: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2199: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2200: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2201: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x451, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2202:  ---  CALL (ram, 0x101bc0, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2203: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2204: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2205: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2206: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2207: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2208: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2209: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2210: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2211: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2212: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2213: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2214: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2215: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2216: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2217: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2218: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2219: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2220: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2221: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2222: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2223: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2224: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2225: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2226: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2227: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2228: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2229: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2230: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2231: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2232: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2233: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2234: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2235: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2236: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2237: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2238: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2239: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2240: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2241: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2242: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2243: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2244: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2245: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x455, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2246:  ---  CALL (ram, 0x103200, 8) , (unique, 0x10000db5, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2247: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2248: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2249: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2250: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2251: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2252: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2253: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2254: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2255: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2256: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2257: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2258: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2259: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2260: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2261: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2262: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2263: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2264: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2265: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2266: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2267: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2268: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2269: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2270: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2271: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2272: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2273: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2274: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2275: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2276: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2277: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2278: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2279: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2280: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2281: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2282: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2283: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2284: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2285: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2286: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2287: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2288: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2289: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x458, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2290: (unique, 0x10000db5, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2291:  ---  CALL (ram, 0x1033f0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2292: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2293: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2294: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2295: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2296: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2297: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2298: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2299: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2300: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2301: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2302: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2303: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2304: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2305: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2306: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2307: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2308: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2309: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2310: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2311: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2312: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2313: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2314: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2315: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2316: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2317: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2318: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2319: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2320: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2321: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2322: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2323: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2324: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2325: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2326: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2327: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2328: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2329: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2330: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2331: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2332: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2333: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2334: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x45c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2335: (register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2336: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2337: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2338: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2339: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2340: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2341: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2342: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2343: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2344: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2345: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2346: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2347: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2348: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2349: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2350: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2351: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2352: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2353: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2354: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2355: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2356: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2357: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2358: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2359: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2360: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2361: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2362: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2363: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2364: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2365: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2366: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2367: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2368: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2369: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2370: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2371: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2372: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2373: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2374: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2375: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2376: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2377: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2378: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2379:  ---  CALL (ram, 0x101bc0, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2380: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2381: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2382: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2383: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2384: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2385: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2386: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2387: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2388: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2389: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2390: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2391: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2392: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2393: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2394: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2395: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2396: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2397: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2398: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2399: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2400: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2401: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2402: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2403: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2404: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2405: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2406: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2407: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2408: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2409: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2410: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2411: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2412: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2413: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2414: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2415: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2416: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2417: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2418: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2419: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2420: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2421: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2422: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x45f, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2423:  ---  CALL (ram, 0x101e10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2424: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2425: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2426: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2427: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2428: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2429: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2430: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2431: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2432: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2433: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2434: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2435: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2436: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2437: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2438: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2439: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2440: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2441: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2442: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2443: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2444: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2445: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2446: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2447: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2448: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2449: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2450: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2451: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2452: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2453: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2454: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2455: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2456: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2457: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2458: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2459: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2460: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2461: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2462: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2463: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2464: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2465: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2466: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x462, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2467:  ---  CALL (ram, 0x101e10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2468: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2469: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2470: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2471: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2472: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2473: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2474: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2475: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2476: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2477: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2478: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2479: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2480: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2481: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2482: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2483: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2484: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2485: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2486: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2487: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2488: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2489: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2490: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2491: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2492: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2493: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2494: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2495: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2496: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2497: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2498: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2499: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2500: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2501: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2502: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2503: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2504: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2505: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2506: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2507: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2508: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2509: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2510: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x466, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2511: (register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2512: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2513: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2514: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2515: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2516: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2517: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2518: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2519: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2520: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2521: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2522: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2523: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2524: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2525: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2526: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2527: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2528: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2529: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2530: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2531: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2532: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2533: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2534: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2535: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2536: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2537: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2538: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2539: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2540: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2541: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2542: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2543: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2544: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2545: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2546: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2547: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2548: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2549: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2550: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2551: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2552: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2553: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2554: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2555: (unique, 0x3e480, 8) INT_SUB (stack, 0xffffffffffffff88, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2556: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2557:  ---  CBRANCH (ram, 0x10273c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2558: (register, 0x4000, 8) COPY (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2559:  ---  RETURN (const, 0x0, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2560: (ram, 0x1211a8, 8) COPY (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2561: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd20, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2562:  ---  CBRANCH (ram, 0x102690, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2563: (unique, 0x24380, 8) LOAD (const, 0x1b1, 4) , (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2564: (unique, 0x24500, 8) LOAD (const, 0x1b1, 4) , (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2565: (unique, 0x24400, 8) PTRADD (register, 0x4098, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2566:  ---  STORE (const, 0x1b1, 4) , (register, 0x4008, 8) , (unique, 0x24380, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2567:  ---  STORE (const, 0x1b1, 4) , (unique, 0x3a300, 8) , (unique, 0x24500, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2568: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x4dd, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2569: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x4df, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2570: (unique, 0x3a300, 8) PTRADD (register, 0x4008, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2571: (unique, 0x10000d75, 8) INT_ADD (unique, 0x10000d6d, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2572: (unique, 0x10000d6d, 8) CAST (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2573: (unique, 0x11f80, 8) CAST (unique, 0x10000d75, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2574: (unique, 0x24900, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d7d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2575: (unique, 0x6400, 8) PTRADD (register, 0x4098, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2576: (unique, 0x10000d7d, 8) CAST (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2577:  ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d85, 8) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2578: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x4ec, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2579: (unique, 0x6980, 8) PTRADD (register, 0x4008, 8) , (const, 0x2, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2580: (unique, 0x10000d85, 8) CAST (unique, 0x6980, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2581: (register, 0x105, 1) INT_LESSEQUAL (register, 0x40a8, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2582: (stack, 0xfffffffffffffcf0, 8) MULTIEQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2583: (stack, 0xfffffffffffffcf8, 8) MULTIEQUAL (stack, 0xfffffffffffffcf8, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2584: (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2585: (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2586: (stack, 0xfffffffffffffd18, 8) MULTIEQUAL (unique, 0x11f80, 8) , (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2587: (stack, 0xfffffffffffffd20, 8) MULTIEQUAL (stack, 0xfffffffffffffd20, 8) , (stack, 0xfffffffffffffd20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2588: (stack, 0xfffffffffffffd30, 8) MULTIEQUAL (stack, 0xfffffffffffffd30, 8) , (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2589: (stack, 0xfffffffffffffd38, 8) MULTIEQUAL (stack, 0xfffffffffffffd38, 8) , (stack, 0xfffffffffffffd38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2590: (stack, 0xfffffffffffffd40, 8) MULTIEQUAL (stack, 0xfffffffffffffd40, 8) , (stack, 0xfffffffffffffd40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2591: (stack, 0xfffffffffffffd48, 8) MULTIEQUAL (stack, 0xfffffffffffffd48, 8) , (stack, 0xfffffffffffffd48, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2592: (stack, 0xfffffffffffffd50, 8) MULTIEQUAL (stack, 0xfffffffffffffd50, 8) , (stack, 0xfffffffffffffd50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2593: (stack, 0xfffffffffffffd58, 4) MULTIEQUAL (stack, 0xfffffffffffffd58, 4) , (stack, 0xfffffffffffffd58, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2594: (stack, 0xfffffffffffffd60, 8) MULTIEQUAL (stack, 0xfffffffffffffd60, 8) , (stack, 0xfffffffffffffd60, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2595: (stack, 0xfffffffffffffd68, 8) MULTIEQUAL (stack, 0xfffffffffffffd68, 8) , (stack, 0xfffffffffffffd68, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2596: (stack, 0xfffffffffffffda0, 8) MULTIEQUAL (stack, 0xfffffffffffffda0, 8) , (stack, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2597: (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2598: (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2599: (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2600: (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2601: (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2602: (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2603: (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2604: (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2605: (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2606: (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (stack, 0xfffffffffffffe28, 8) , (stack, 0xfffffffffffffe28, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2607: (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2608: (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2609: (stack, 0xfffffffffffffe40, 4) MULTIEQUAL (stack, 0xfffffffffffffe40, 4) , (stack, 0xfffffffffffffe40, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2610: (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2611: (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2612: (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2613: (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2614: (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2615: (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2616: (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2617: (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2618: (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2619: (stack, 0xfffffffffffffeb4, 4) MULTIEQUAL (stack, 0xfffffffffffffeb4, 4) , (stack, 0xfffffffffffffeb4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2620: (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2621: (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2622: (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2623: (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2624: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2625:  ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2626: (unique, 0x100009dd, 8) COPY (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2627: (unique, 0x100009fd, 8) COPY (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2628: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000dbd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2629: (register, 0x4010, 8) MULTIEQUAL (unique, 0x100009d5, 8) , (unique, 0x100009dd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2630: (register, 0x4020, 8) MULTIEQUAL (unique, 0x100009f5, 8) , (unique, 0x100009fd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2631: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2632: (unique, 0x10000dbd, 8) CAST (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2633: (unique, 0x11f80, 8) INT_ADD (register, 0x4010, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2634:  ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2635: (unique, 0x1df00, 8) MULTIEQUAL (unique, 0x1000097d, 8) , (unique, 0x10000985, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2636: (unique, 0x1000097d, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2637: (unique, 0x10000985, 8) COPY (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2638: (register, 0x107, 1) INT_SLESS (unique, 0x10000dc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2639: (unique, 0x1000059d, 8) INT_2COMP (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2640: (unique, 0x10000dc5, 8) CAST (register, 0x4010, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2641: (register, 0x4000, 8) INT_AND (unique, 0x1000059d, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2642: (register, 0x4028, 8) INT_AND (register, 0x4010, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2643: (register, 0x4018, 8) INT_SRIGHT (unique, 0x10000dcd, 8) , (const, 0x6, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2644: (unique, 0x10000dcd, 8) CAST (unique, 0x1df00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2645:  ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2646: (unique, 0x1f000, 8) INT_2COMP (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2647: (unique, 0x1f000, 8) MULTIEQUAL (register, 0x4028, 8) , (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2648: (unique, 0x4400, 8) INT_MULT (register, 0x4018, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2649: (unique, 0x10000ddd, 8) INT_ADD (unique, 0x10000dd5, 8) , (unique, 0x4400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2650: (unique, 0x10000dd5, 8) CAST (register, 0x40b0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2651: (unique, 0x12480, 8) CAST (unique, 0x10000ddd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2652: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000de5, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2653:  ---  CBRANCH (ram, 0x102588, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2654: (unique, 0x10000de5, 8) CAST (unique, 0x1f000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2655: (unique, 0x11f80, 8) INT_ADD (unique, 0x1f000, 8) , (const, 0x40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2656: (register, 0x4018, 8) PTRADD (unique, 0x12480, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2657: (register, 0x4028, 8) LOAD (const, 0x1b1, 4) , (register, 0x4018, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2658: (register, 0x4000, 8) MULTIEQUAL (unique, 0x1f000, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2659: (register, 0x4018, 8) MULTIEQUAL (unique, 0x12480, 8) , (register, 0x4018, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2660: (unique, 0x27c00, 8) INT_AND (register, 0x4000, 8) , (const, 0x3f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2661: (register, 0x4000, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x27c00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2662: (unique, 0x3ff00, 8) INT_AND (register, 0x4000, 8) , (register, 0x4028, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2663: (register, 0x108, 1) INT_EQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2664:  ---  CBRANCH (ram, 0x1025e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2665: (register, 0x5220, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ded, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2666: (unique, 0x10000dfd, 8) INT_ADD (unique, 0x10000df5, 8) , (const, 0x4, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2667: (register, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2668: (unique, 0x10000ded, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2669: (unique, 0x10000df5, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2670: (unique, 0x7c800, 8) CAST (unique, 0x10000dfd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2671: (unique, 0x10000e0d, 8) INT_ADD (unique, 0x10000e05, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2672: (register, 0x50e0, 4) LOAD (const, 0x1b1, 4) , (unique, 0x7b80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2673: (register, 0x50c0, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e15, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2674: (unique, 0x7c800, 8) PTRADD (register, 0x4020, 8) , (const, 0x3, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2675: (unique, 0x10000e05, 8) CAST (register, 0x4020, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2676: (unique, 0x7b80, 8) CAST (unique, 0x10000e0d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2677: (unique, 0x10000e15, 8) CAST (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2678: (register, 0x5020, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e1d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2679: (unique, 0x10000e2d, 8) INT_ADD (unique, 0x10000e25, 8) , (const, 0xc, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2680: (register, 0x50a0, 4) LOAD (const, 0x1b1, 4) , (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2681: (unique, 0x7b80, 8) PTRADD (register, 0x4098, 8) , (const, 0x1, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2682: (unique, 0x10000e1d, 8) CAST (unique, 0x7b80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2683: (unique, 0x10000e25, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2684: (unique, 0x7c800, 8) CAST (unique, 0x10000e2d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2685: (unique, 0x100005ae, 1) FLOAT_LESSEQUAL (register, 0x50e0, 4) , (register, 0x5220, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2686: (unique, 0x10000e3d, 8) INT_ADD (unique, 0x10000e35, 8) , (const, 0x1c, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2687: (register, 0x5080, 4) LOAD (const, 0x1b1, 4) , (unique, 0x7b80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2688: (register, 0x5060, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e45, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2689: (unique, 0x7c800, 8) PTRADD (register, 0x4020, 8) , (const, 0x4, 8) , (const, 0x8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2690: (unique, 0x10000e35, 8) CAST (register, 0x4020, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2691: (unique, 0x7b80, 8) CAST (unique, 0x10000e3d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2692: (unique, 0x10000e45, 8) CAST (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2693:  ---  CBRANCH (ram, 0x1025b0, 1) , (unique, 0x100005ae, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2694: (unique, 0x10000a25, 4) COPY (register, 0x50e0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2695: (unique, 0x10000a29, 4) COPY (register, 0x5220, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2696: (register, 0x5040, 4) MULTIEQUAL (unique, 0x10000a25, 4) , (unique, 0x10000a29, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2697: (unique, 0x100005b2, 1) FLOAT_LESSEQUAL (register, 0x50c0, 4) , (register, 0x5200, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2698:  ---  CBRANCH (ram, 0x1025b8, 1) , (unique, 0x100005b2, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2699: (unique, 0x10000a1d, 4) COPY (register, 0x50c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2700: (unique, 0x10000a21, 4) COPY (register, 0x5200, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2701: (register, 0x5240, 4) MULTIEQUAL (unique, 0x10000a1d, 4) , (unique, 0x10000a21, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2702: (unique, 0x100006d5, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (register, 0x5080, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2703:  ---  CBRANCH (ram, 0x1025c0, 1) , (unique, 0x100006d5, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2704: (unique, 0x10000a2d, 4) COPY (register, 0x5080, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2705: (unique, 0x10000a31, 4) COPY (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2706: (register, 0x5000, 4) MULTIEQUAL (unique, 0x10000a2d, 4) , (unique, 0x10000a31, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2707: (unique, 0x100006d9, 1) FLOAT_LESSEQUAL (register, 0x50a0, 4) , (register, 0x5060, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2708: (register, 0x5000, 4) FLOAT_SUB (register, 0x5000, 4) , (register, 0x5040, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2709:  ---  CBRANCH (ram, 0x1025cc, 1) , (unique, 0x100006d9, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2710: (unique, 0x10000a35, 4) COPY (register, 0x5060, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2711: (unique, 0x10000a39, 4) COPY (register, 0x50a0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2712: (register, 0x5040, 4) MULTIEQUAL (unique, 0x10000a35, 4) , (unique, 0x10000a39, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2713: (register, 0x5040, 4) FLOAT_SUB (register, 0x5040, 4) , (register, 0x5240, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2714: (unique, 0x2080, 1) FLOAT_LESSEQUAL (register, 0x5000, 4) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2715:  ---  CBRANCH (ram, 0x1025d8, 1) , (unique, 0x2080, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2716: (register, 0x5000, 4) COPY (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2717: (register, 0x5000, 4) MULTIEQUAL (register, 0x5000, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2718: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5040, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2719:  ---  CBRANCH (ram, 0x102600, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2720: (unique, 0x11f80, 8) INT_ADD (register, 0x4010, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2721: (ram, 0x1211a8, 8) MULTIEQUAL (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8) , (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2722: (unique, 0x10000e59, 8) INT_ADD (unique, 0x10000e51, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2723: (unique, 0x10000e51, 8) CAST (register, 0x4020, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2724: (unique, 0x11f80, 8) CAST (unique, 0x10000e59, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2725: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2726:  ---  CBRANCH (ram, 0x102558, 1) , (register, 0x108, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2727: (unique, 0x100009d5, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2728: (unique, 0x100009f5, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2729: (unique, 0x11f80, 8) INT_ADD (register, 0x40a0, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2730: (unique, 0x10000e69, 8) INT_ADD (unique, 0x10000e61, 8) , (const, 0x14, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2731: (unique, 0x10000e61, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2732: (unique, 0x11f80, 8) CAST (unique, 0x10000e69, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2733:  ---  BRANCH (ram, 0x102340, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2734: (unique, 0x100009a5, 8) COPY (stack, 0xfffffffffffffd18, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2735: (unique, 0x10000a0d, 8) COPY (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2736: (register, 0x5020, 4) FLOAT_SUB (register, 0x5020, 4) , (register, 0x5220, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2737: (register, 0x50a0, 4) FLOAT_SUB (register, 0x50a0, 4) , (register, 0x5200, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2738: (register, 0x5080, 4) FLOAT_SUB (register, 0x5080, 4) , (register, 0x50e0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2739: (register, 0x5060, 4) FLOAT_SUB (register, 0x5060, 4) , (register, 0x50c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2740: (register, 0x5000, 4) FLOAT_MULT (register, 0x5000, 4) , (register, 0x5040, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2741: (register, 0x5020, 4) FLOAT_MULT (register, 0x5020, 4) , (register, 0x50a0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2742: (unique, 0x10000e4d, 4) CALLOTHER (const, 0xb0, 4) , (register, 0x5080, 4) , (register, 0x5060, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2743: (register, 0x5020, 4) CAST (unique, 0x10000e4d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2744: (register, 0x5020, 4) FLOAT_SUB (register, 0x5020, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2745: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2746:  ---  CBRANCH (ram, 0x10262c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2747: (register, 0x5000, 4) FLOAT_DIV (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2748: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3e99999a, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2749:  ---  CBRANCH (ram, 0x10263c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2750: (register, 0x4000, 8) INT_OR (register, 0x4000, 8) , (register, 0x4028, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2751:  ---  STORE (const, 0x1b1, 4) , (register, 0x4018, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2752: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x683, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2753:  ---  BRANCH (ram, 0x1025e0, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2754:  ---  CALL (ram, 0x101c60, 8) , (unique, 0x10000aad, 8) , (unique, 0x1000077f, 8) , (const, 0x16, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2755: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2756: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2757: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2758: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2759: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2760: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2761: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2762: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2763: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2764: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2765: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2766: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2767: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2768: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2769: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2770: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2771: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2772: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2773: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2774: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2775: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2776: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2777: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2778: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2779: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2780: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2781: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2782: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2783: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2784: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2785: (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2786: (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2787: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2788: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2789: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2790: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2791: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2792: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2793: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2794: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2795: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2796: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2797: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2798: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2799: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x790, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2800: (unique, 0x1000077f, 8) COPY (const, 0x103898, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2801: (unique, 0x100007a7, 8) PTRSUB (const, 0x0, 8) , (const, 0x121098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2802: (unique, 0x10000aad, 8) CAST (unique, 0x100007a7, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2803: (register, 0x4000, 8) CALL (ram, 0x101c60, 8) , (unique, 0x10000ab5, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2804: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2805: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2806: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2807: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2808: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2809: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2810: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2811: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2812: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2813: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2814: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2815: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2816: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2817: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2818: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2819: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2820: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2821: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2822: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2823: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2824: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2825: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2826: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2827: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2828: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2829: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2830: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2831: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2832: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2833: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2834: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2835: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2836: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2837: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2838: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2839: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2840: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2841: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2842: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2843: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2844: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2845: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2846: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x79b, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2847: (unique, 0x100007af, 8) PTRSUB (const, 0x0, 8) , (const, 0x121098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2848: (unique, 0x10000ab5, 8) CAST (unique, 0x100007af, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2849:  ---  CALL (ram, 0x102c60, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2850: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2851: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2852: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2853: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2854: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2855: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2856: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2857: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2858: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2859: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2860: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2861: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2862: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2863: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2864: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2865: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2866: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2867: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2868: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2869: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2870: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2871: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2872: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2873: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2874: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2875: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2876: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2877: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2878: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2879: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2880: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2881: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2882: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2883: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2884: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2885: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2886: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2887: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2888: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2889: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2890: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2891: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2892: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x79d, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2893: (register, 0x4098, 8) COPY (const, 0xffffffff, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2894:  ---  BRANCH (ram, 0x1024c0, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2895:  ---  CALL (ram, 0x1035e0, 8) , (unique, 0x10000bd5, 8) , (register, 0x4008, 4) , (unique, 0x10000bdd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2896: (register, 0x4008, 4) SUBPIECE (register, 0x4008, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2897: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2898: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2899: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2900: (stack, 0xfffffffffffffd30, 8) INDIRECT (register, 0x5000, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2901: (stack, 0xfffffffffffffd38, 8) INDIRECT (register, 0x5008, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2902: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2903: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2904: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2905: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2906: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2907: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2908: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2909: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2910: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2911: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2912: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2913: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2914: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2915: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2916: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2917: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2918: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2919: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2920: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2921: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2922: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2923: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2924: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2925: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2926: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2927: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2928: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2929: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2930: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2931: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2932: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2933: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2934: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x775, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2935: (unique, 0x10000bd5, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2936: (unique, 0x10000bdd, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2937:  ---  BRANCH (ram, 0x1021ec, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2938: (unique, 0x100009cd, 8) COPY (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2939:  ---  CALL (ram, 0x1035e0, 8) , (unique, 0x10000d5d, 8) , (register, 0x4008, 4) , (unique, 0x10000d65, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2940: (register, 0x4008, 4) SUBPIECE (register, 0x4008, 8) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2941: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2942: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2943: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2944: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2945: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2946: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2947: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2948: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2949: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2950: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2951: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2952: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2953: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2954: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2955: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2956: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2957: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2958: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2959: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2960: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2961: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2962: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2963: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2964: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2965: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2966: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2967: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2968: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2969: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2970: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2971: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2972: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2973: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2974: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2975: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2976: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2977: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2978: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2979: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2980: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2981: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2982: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2983: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x689, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2984: (unique, 0x10000d5d, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2985: (unique, 0x10000d65, 8) CAST (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2986:  ---  BRANCH (ram, 0x102548, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2987: (stack, 0xfffffffffffffd30, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2988: (stack, 0xfffffffffffffd38, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2989: (stack, 0xfffffffffffffd40, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2990: (stack, 0xfffffffffffffd48, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2991: (stack, 0xfffffffffffffd50, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2992: (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2993:  ---  CBRANCH (ram, 0x102734, 1) , (unique, 0x18e80, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2994: (unique, 0x11f80, 8) INT_ADD (unique, 0x1f000, 8) , (const, 0x40, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2995: (unique, 0x10000d15, 8) INT_ADD (unique, 0x10000d0d, 8) , (const, 0xfffffffffffffff8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2996: (unique, 0x10000d0d, 8) CAST (unique, 0x12480, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2997: (register, 0x4020, 8) CAST (unique, 0x10000d15, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2998:  ---  BRANCH (ram, 0x102304, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 2999:  ---  CALL (ram, 0x101c40, 8) , (unique, 0x10000787, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3000: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3001: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3002: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3003: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3004: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3005: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3006: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3007: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3008: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3009: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3010: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3011: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3012: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3013: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3014: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3015: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3016: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3017: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3018: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3019: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3020: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3021: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3022: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3023: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3024: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3025: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3026: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3027: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3028: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3029: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3030: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3031: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3032: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3033: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3034: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3035: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3036: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3037: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3038: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3039: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3040: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3041: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3042: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x4c6, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3043: (unique, 0x10000787, 8) COPY (const, 0x1038c0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3044:  ---  BRANCH (ram, 0x10247c, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3045:  ---  CALL (ram, 0x101c60, 8) , (unique, 0x10000a75, 8) , (unique, 0x1000076f, 8) , (const, 0x7, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3046: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3047: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3048: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3049: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3050: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3051: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3052: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3053: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3054: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3055: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3056: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3057: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3058: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3059: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3060: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3061: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3062: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3063: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3064: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3065: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3066: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3067: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3068: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3069: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3070: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3071: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3072: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3073: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3074: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3075: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3076: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3077: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3078: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3079: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3080: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3081: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3082: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3083: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3084: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3085: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3086: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3087: (stack, 0xffffffffffffff88, 8) INDIRECT (register, 0x4008, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3088: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x7ad, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3089: (unique, 0x1000076f, 8) COPY (const, 0x103870, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3090: (unique, 0x100007b7, 8) PTRSUB (const, 0x0, 8) , (const, 0x121098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3091: (unique, 0x10000a75, 8) CAST (unique, 0x100007b7, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3092: (register, 0x4008, 8) LOAD (const, 0x1b1, 4) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3093: (register, 0x4000, 8) CALL (ram, 0x101d40, 8) , (unique, 0x10000a7d, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3094: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3095: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3096: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3097: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3098: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3099: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3100: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3101: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3102: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3103: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3104: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3105: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3106: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3107: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3108: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3109: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3110: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3111: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3112: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3113: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3114: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3115: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3116: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3117: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3118: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3119: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3120: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3121: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3122: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3123: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3124: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3125: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3126: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3127: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3128: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3129: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3130: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3131: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3132: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3133: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3134: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3135: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3136: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x7b4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3137: (unique, 0x100007bf, 8) PTRSUB (const, 0x0, 8) , (const, 0x121098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3138: (unique, 0x10000a7d, 8) CAST (unique, 0x100007bf, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3139:  ---  CALL (ram, 0x101c60, 8) , (register, 0x4000, 8) , (unique, 0x10000777, 8) , (const, 0x1a, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3140: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3141: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3142: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3143: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3144: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3145: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3146: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3147: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3148: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3149: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3150: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3151: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3152: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3153: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3154: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3155: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3156: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3157: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3158: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3159: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3160: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3161: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3162: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3163: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3164: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3165: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3166: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3167: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3168: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3169: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3170: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3171: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3172: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3173: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3174: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3175: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3176: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3177: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3178: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3179: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3180: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3181: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3182: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x7c0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3183: (unique, 0x10000777, 8) COPY (const, 0x103878, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3184: (register, 0x4098, 8) COPY (const, 0xffffffff, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3185:  ---  CALL (ram, 0x102c60, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3186: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3187: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3188: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3189: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3190: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3191: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3192: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3193: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3194: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3195: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3196: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3197: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3198: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3199: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3200: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3201: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3202: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3203: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3204: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3205: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3206: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3207: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3208: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3209: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3210: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3211: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3212: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3213: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3214: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3215: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3216: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3217: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3218: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3219: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3220: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3221: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3222: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3223: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3224: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3225: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3226: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3227: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3228: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x7c4, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3229:  ---  BRANCH (ram, 0x1024e8, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3230: (register, 0x40b0, 8) COPY (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3231:  ---  BRANCH (ram, 0x10231c, 1)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3232:  ---  CALL (ram, 0x101e50, 8) , (unique, 0x100007c7, 8) , (const, 0x0, 8) , (unique, 0x3e480, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3233:  ---  RETURN (const, 0x1, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3234: (stack, 0xfffffffffffffcf0, 8) INDIRECT (stack, 0xfffffffffffffcf0, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3235: (stack, 0xfffffffffffffcf8, 8) INDIRECT (stack, 0xfffffffffffffcf8, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3236: (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3237: (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3238: (stack, 0xfffffffffffffd18, 8) INDIRECT (stack, 0xfffffffffffffd18, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3239: (stack, 0xfffffffffffffd20, 8) INDIRECT (stack, 0xfffffffffffffd20, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3240: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3241: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3242: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3243: (stack, 0xfffffffffffffd48, 8) INDIRECT (stack, 0xfffffffffffffd48, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3244: (stack, 0xfffffffffffffd50, 8) INDIRECT (stack, 0xfffffffffffffd50, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3245: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3246: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3247: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3248: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3249: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3250: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3251: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3252: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3253: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3254: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3255: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3256: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3257: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3258: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3259: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3260: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3261: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3262: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3263: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3264: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3265: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3266: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3267: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3268: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3269: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3270: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3271: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3272: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3273: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3274: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3275: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3276: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x4ba, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3277: (ram, 0x1211a8, 8) COPY (ram, 0x1211a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 3278: (unique, 0x100007c7, 8) PTRSUB (const, 0x0, 8) , (const, 0x1211a8, 8)  
2025-08-19 02:09:52 ERROR (GhidraScript) mnn_analyzer.py> ERROR: [MNN_RULE] Found stack variable for sink, but could not find a subsequent COPY operation using it.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010219c. Address varnode: (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6400]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6400]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1580, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x24900, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021c0] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'iVar5(UniquePcode[0x24900])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001021e0. Address varnode: (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode pfVar32(x19) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer pfVar32(x19) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3f000000, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021e8] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x3f000000)', 'fVar36(s0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (unique, 0x11800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021f8] Taint reached CBRANCH. Operands: ['pfVar32(x19)', 'pfVar1(UniquePcode[0x11800])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102220] Taint reached CBRANCH. Operands: ['local_310(StackDirect[Stack[-0x310]])', 'local_308(StackDirect[Stack[-0x308]])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1580, 1) INT_SLESS (register, 0x4090, 8) , (const, 0x141, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102248] Taint reached CBRANCH. Operands: ['extraout_x18(x18)', 'UnnamedHighVar(Constant: 0x141)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000947, 1) INT_NOTEQUAL (unique, 0x1000096d, 8) , (unique, 0x1000093f, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102264] Taint reached CBRANCH. Operands: ['ppvVar28(x1)', 'ppvVar27(x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102268. Address varnode: (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar27(x1) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar27(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102268. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102274. Address varnode: (unique, 0x10000c0d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c0d]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c0d]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102284. Address varnode: (unique, 0x6980, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6980]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6980]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102288. Address varnode: (unique, 0x10000c25, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c25]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c25]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102290] Taint reached CBRANCH. Operands: ['UNNAMED(s0)', 'fVar36(s0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x1000096d, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001022ac] Taint reached CBRANCH. Operands: ['ppvVar28(x1)', 'ppvVar30(x2)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000cc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001022f8] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000cc5])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d05, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102300] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d05])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000d1d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102348] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x-1)', 'UNNAMED(UniquePcode[0x10000d1d])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000d25, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010235c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d25])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d45, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102364] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d45])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102370. Address varnode: (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar22(x0) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar22(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010237c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3ff00])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x105, 1) INT_LESS (register, 0x40a0, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010238c] Taint reached CBRANCH. Operands: ['uVar29(x2)', 'uVar12(x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023a0. Address varnode: (unique, 0x10000239, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000239]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000239]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023a0. Address varnode: (unique, 0x7ee00, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar7(UniquePcode[0x7ee00]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar7(UniquePcode[0x7ee00]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd00, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001023b8] Taint reached CBRANCH. Operands: ['local_300(StackDirect[Stack[-0x300]])', 'ppvVar26(x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023d8. Address varnode: (register, 0x4000, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar20(x0) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar20(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023d8. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023e4. Address varnode: (unique, 0x6400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6400]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6400]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023f4. Address varnode: (unique, 0x10000c75, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c75]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c75]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001023fc] Taint reached CBRANCH. Operands: ['UNNAMED(s0)', 'fVar36(s0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18e80, 1) INT_EQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 00102440 from instruction 'cbnz'.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102454] Taint reached CBRANCH. Operands: ['local_2e8(StackDirect[Stack[-0x2e8]])', 'local_2f0(StackDirect[Stack[-0x2f0]])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102458. Address varnode: (unique, 0x10000d8d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000d8d]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000d8d]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (const, 0x3f4ccccd, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010246c] Taint reached CBRANCH. Operands: ['UNNAMED(s1)', 'UnnamedHighVar(Constant: 0x3f4ccccd)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102500] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3e480])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102520] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (register, 0x4098, 8) at 00102508)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(UniquePcode[0x10000b55])  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. pTVar18(x0)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd20, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010252c] Taint reached CBRANCH. Operands: ['local_2e0(StackDirect[Stack[-0x2e0]])', 'ppvVar28(x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102530. Address varnode: (register, 0x4098, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar26(x1) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar26(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102530. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010253c. Address varnode: (unique, 0x10000d7d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000d7d]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000d7d]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x105, 1) INT_LESSEQUAL (register, 0x40a8, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010254c] Taint reached CBRANCH. Operands: ['uVar12(x0)', 'uVar29(x2)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000dbd, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102560] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x-1)', 'UNNAMED(UniquePcode[0x10000dbd])'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000dc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102574] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000dc5])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000de5, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010257c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000de5])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102588. Address varnode: (register, 0x4018, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar22(x0) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar22(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102594] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3ff00])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102598. Address varnode: (unique, 0x10000ded, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000ded]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000ded]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102598. Address varnode: (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7c800]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7c800]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010259c. Address varnode: (unique, 0x7b80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7b80]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7b80]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010259c. Address varnode: (unique, 0x10000e15, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e15]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e15]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a0. Address varnode: (unique, 0x10000e1d, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e1d]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e1d]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a0. Address varnode: (unique, 0x7c800, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7c800]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7c800]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a8. Address varnode: (unique, 0x7b80, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7b80]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7b80]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a8. Address varnode: (unique, 0x10000e45, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e45]) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e45]) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100005ae, 1) FLOAT_LESSEQUAL (register, 0x50e0, 4) , (register, 0x5220, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025ac] Taint reached CBRANCH. Operands: ['fVar44(s7)', 'fVar46(s17)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100005b2, 1) FLOAT_LESSEQUAL (register, 0x50c0, 4) , (register, 0x5200, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025b4] Taint reached CBRANCH. Operands: ['fVar43(s6)', 'fVar45(s16)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100006d5, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (register, 0x5080, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025bc] Taint reached CBRANCH. Operands: ['fVar38(s1)', 'fVar41(s4)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100006d9, 1) FLOAT_LESSEQUAL (register, 0x50a0, 4) , (register, 0x5060, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025c8] Taint reached CBRANCH. Operands: ['fVar42(s5)', 'fVar40(s3)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x2080, 1) FLOAT_LESSEQUAL (register, 0x5000, 4) , (const, 0x0, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025d4] Taint reached CBRANCH. Operands: ['fVar37(s0)', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5040, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025dc] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'UNNAMED(s2)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025ec] Taint reached CBRANCH. Operands: ['uVar34(x20)', 'uVar12(x0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102624] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'fVar36(s0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3e99999a, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102634] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x3e99999a)', 'UNNAMED(s0)'].   
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 001026b0 from instruction 'cbnz'.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102700. Address varnode: (register, 0x4008, 8)  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode param_2(x1) is not tainted (recursive check).  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer param_2(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> 
--- Analyzing Call Site #1057056 at 00102120 ---  
2025-08-19 02:09:52 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Parent (caller): main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> 
--- Initiating Taint Analysis for: main (call at 00102120) ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: Taint source is the return value of the call: UNNAMED(UniquePcode[0x10000b65])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> \n>>> Analyzing function: main (Depth: 0) at 00101e80 (Originating from: getSessionOutput) with initial taints: UNNAMED(UniquePcode[0x10000b65])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Analyzing varnode: (unique, 0x10000b65, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Details: isAddress=0, addr=unique:10000b65, isStackAddress=0  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Def P-Code Op: (unique, 0x10000b65, 8) CALL (ram, 0x101cd0, 8) , (unique, 0x10000b5d, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   - [STACK_SEARCH.0] Mnemonic 'CALL' is not a handled case. Aborting path.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> \nDEBUG: Reached specified start PcodeOp (unique, 0x10000b65, 8) CALL (ram, 0x101cd0, 8) , (unique, 0x10000b5d, 8) , (register, 0x4000, 8) at 00102120 in main, subsequent ops will be processed.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102120] Taint propagated from UNNAMED(UniquePcode[0x10000b65]) to pTVar19(x0) via CAST.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found call to 'Tensor' with a tainted argument.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x10000b75, 8), Def_Op: (unique, 0x10000b75, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Tracing `this` pointer... At VN: (unique, 0x11f80, 8), Def_Op: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffda0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Identified base register as (register, 0x8, 8) and offset as -0x260  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found base-relative origin. `this` offset is -0x260. Calculated sink offset: -0x250  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE] Found matching stack symbol 'local_250' at offset -0x250.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 902: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 903: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 904: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 905: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 906: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 907: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 908: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 909: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 910: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 911: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 912: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 913: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 914: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 915: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 916: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 917: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 918: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 919: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 920: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 921: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 922: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 923: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 924: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 925: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 926: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 927: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 928: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 929: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 930: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 931: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 932: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 933: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 934: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 935: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 936: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1e8, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 937: (unique, 0x10000b75, 8) CAST (unique, 0x11f80, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 938:  ---  CALL (ram, 0x101da0, 8) , (register, 0x4000, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 939: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 940: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 941: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 942: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 943: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 944: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 945: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 946: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 947: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 948: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 949: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 950: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 951: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 952: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 953: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 954: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 955: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 956: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 957: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 958: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 959: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 960: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 961: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 962: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 963: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 964: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 965: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 966: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 967: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 968: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 969: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 970: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 971: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 972: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 973: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1ec, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 974: (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 975:  ---  CALL (ram, 0x101b60, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 976: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 977: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 978: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 979: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 980: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 981: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 982: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 983: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 984: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 985: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 986: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 987: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 988: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 989: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 990: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 991: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 992: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 993: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 994: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 995: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 996: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 997: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 998: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 999: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1000: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1001: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1002: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1003: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1004: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1005: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1006: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1007: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1008: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1009: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1010: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x1f7, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1011: (unique, 0x10000b85, 8) INT_ADD (unique, 0x10000b7d, 8) , (const, 0x4, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1012: (unique, 0x24900, 4) LOAD (const, 0x1b1, 4) , (unique, 0x6400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1013: (unique, 0x10000b7d, 8) CAST (stack, 0xfffffffffffffd30, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1014: (unique, 0x6400, 8) CAST (unique, 0x10000b85, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1015:  ---  CALL (ram, 0x103490, 8) , (unique, 0x10000b8d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1016: (stack, 0xfffffffffffffd30, 8) INDIRECT (stack, 0xfffffffffffffd30, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1017: (stack, 0xfffffffffffffd38, 8) INDIRECT (stack, 0xfffffffffffffd38, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1018: (stack, 0xfffffffffffffd40, 8) INDIRECT (stack, 0xfffffffffffffd40, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1019: (stack, 0xfffffffffffffd58, 4) INDIRECT (stack, 0xfffffffffffffd58, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1020: (stack, 0xfffffffffffffd60, 8) INDIRECT (stack, 0xfffffffffffffd60, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1021: (stack, 0xfffffffffffffd68, 8) INDIRECT (stack, 0xfffffffffffffd68, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1022: (stack, 0xfffffffffffffda0, 8) INDIRECT (stack, 0xfffffffffffffda0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1023: (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1024: (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1025: (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1026: (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1027: (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1028: (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1029: (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1030: (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1031: (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1032: (stack, 0xfffffffffffffe28, 8) INDIRECT (stack, 0xfffffffffffffe28, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1033: (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1034: (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1035: (stack, 0xfffffffffffffe40, 4) INDIRECT (stack, 0xfffffffffffffe40, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1036: (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1037: (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1038: (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1039: (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1040: (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1041: (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1042: (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1043: (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1044: (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1045: (stack, 0xfffffffffffffeb4, 4) INDIRECT (stack, 0xfffffffffffffeb4, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1046: (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1047: (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1048: (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1049: (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1050: (ram, 0x1211a8, 8) INDIRECT (ram, 0x1211a8, 8) , (const, 0x20e, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [MNN_RULE_SCAN] Checking P-code at index 1051: (unique, 0x10000975, 8) COPY (stack, 0xfffffffffffffdb0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Found sink use via COPY operation at address 001021a8: (unique, 0x10000975, 8) COPY (stack, 0xfffffffffffffdb0, 8). Tainting its output: puVar14(x0)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [MNN_RULE] Added puVar14(x0) to current taint set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Detected call to 'copyToHostTensor' with tainted arguments.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [RULE copyToHostTensor] Call has no return value to taint.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010219c. Address varnode: (unique, 0x6400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6400]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6400]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1580, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x24900, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021c0] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'iVar5(UniquePcode[0x24900])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001021e0. Address varnode: (register, 0x4098, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode pfVar32(x19) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer pfVar32(x19) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3f000000, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021e8] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x3f000000)', 'fVar36(s0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (unique, 0x11800, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001021f8] Taint reached CBRANCH. Operands: ['pfVar32(x19)', 'pfVar1(UniquePcode[0x11800])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffcf0, 8) , (stack, 0xfffffffffffffcf8, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102220] Taint reached CBRANCH. Operands: ['local_310(StackDirect[Stack[-0x310]])', 'local_308(StackDirect[Stack[-0x308]])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1580, 1) INT_SLESS (register, 0x4090, 8) , (const, 0x141, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102248] Taint reached CBRANCH. Operands: ['extraout_x18(x18)', 'UnnamedHighVar(Constant: 0x141)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x10000947, 1) INT_NOTEQUAL (unique, 0x1000096d, 8) , (unique, 0x1000093f, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102264] Taint reached CBRANCH. Operands: ['ppvVar28(x1)', 'ppvVar27(x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102268. Address varnode: (register, 0x4008, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar27(x1) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar27(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102268. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102274. Address varnode: (unique, 0x10000c0d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c0d]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c0d]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102284. Address varnode: (unique, 0x6980, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6980]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6980]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102288. Address varnode: (unique, 0x10000c25, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c25]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c25]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102290] Taint reached CBRANCH. Operands: ['UNNAMED(s0)', 'fVar36(s0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x1000096d, 8) , (unique, 0x11f80, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001022ac] Taint reached CBRANCH. Operands: ['ppvVar28(x1)', 'ppvVar30(x2)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000cc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001022f8] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000cc5])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d05, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102300] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d05])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000d1d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102348] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x-1)', 'UNNAMED(UniquePcode[0x10000d1d])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000d25, 8) , (const, 0x1, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010235c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d25])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000d45, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102364] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000d45])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102370. Address varnode: (register, 0x4000, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar22(x0) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar22(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010237c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3ff00])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x105, 1) INT_LESS (register, 0x40a0, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010238c] Taint reached CBRANCH. Operands: ['uVar29(x2)', 'uVar12(x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023a0. Address varnode: (unique, 0x10000239, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000239]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000239]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023a0. Address varnode: (unique, 0x7ee00, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar7(UniquePcode[0x7ee00]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar7(UniquePcode[0x7ee00]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 001023a0] Taint propagated from puVar14(x0) to UNNAMED(UniquePcode[0x10000b9d]) via CAST.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd00, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001023b8] Taint reached CBRANCH. Operands: ['local_300(StackDirect[Stack[-0x300]])', 'ppvVar26(x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023d8. Address varnode: (register, 0x4000, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar20(x0) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar20(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023d8. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023e4. Address varnode: (unique, 0x6400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x6400]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x6400]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001023f4. Address varnode: (unique, 0x10000c75, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000c75]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000c75]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (register, 0x5000, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001023fc] Taint reached CBRANCH. Operands: ['UNNAMED(s0)', 'fVar36(s0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18e80, 1) INT_EQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 00102440 from instruction 'cbnz'.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd18, 8) , (stack, 0xfffffffffffffd10, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102454] Taint reached CBRANCH. Operands: ['local_2e8(StackDirect[Stack[-0x2e8]])', 'local_2f0(StackDirect[Stack[-0x2f0]])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102458. Address varnode: (unique, 0x10000d8d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000d8d]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000d8d]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (const, 0x3f4ccccd, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010246c] Taint reached CBRANCH. Operands: ['UNNAMED(s1)', 'UnnamedHighVar(Constant: 0x3f4ccccd)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x3e480, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102500] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3e480])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [main @ 00102520] Analyzing potential tainted RETURN with value: UNNAMED(x0) (Tainted: 0)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] --- Taint Check Details (RETURN FAILED) ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Return Varnode: (register, 0x4000, 8) (Size: 8, Def: (register, 0x4000, 8) COPY (register, 0x4098, 8) at 00102508)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]   > Currently Tainted HighVariables in this function:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     1. UNNAMED(UniquePcode[0x10000b65])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     2. UNNAMED(UniquePcode[0x10000b9d])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     3. pTVar19(x0)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG]     4. puVar14(x0)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     [DEBUG] ---------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (stack, 0xfffffffffffffd20, 8) , (register, 0x4008, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010252c] Taint reached CBRANCH. Operands: ['local_2e0(StackDirect[Stack[-0x2e0]])', 'ppvVar28(x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102530. Address varnode: (register, 0x4098, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode ppvVar26(x1) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer ppvVar26(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102530. Address varnode: (unique, 0x24400, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x24400]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x24400]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010253c. Address varnode: (unique, 0x10000d7d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000d7d]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000d7d]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x105, 1) INT_LESSEQUAL (register, 0x40a8, 8) , (register, 0x40a0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010254c] Taint reached CBRANCH. Operands: ['uVar12(x0)', 'uVar29(x2)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x10000dbd, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102560] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x-1)', 'UNNAMED(UniquePcode[0x10000dbd])'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x107, 1) INT_SLESS (unique, 0x10000dc5, 8) , (const, 0x1, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102574] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000dc5])', 'UnnamedHighVar(Constant: 0x1)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18880, 1) INT_SLESS (unique, 0x10000de5, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 0010257c] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x10000de5])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102588. Address varnode: (register, 0x4018, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode puVar22(x0) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer puVar22(x0) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_EQUAL (unique, 0x3ff00, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102594] Taint reached CBRANCH. Operands: ['UNNAMED(UniquePcode[0x3ff00])', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102598. Address varnode: (unique, 0x10000ded, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000ded]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000ded]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102598. Address varnode: (unique, 0x7c800, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7c800]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7c800]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010259c. Address varnode: (unique, 0x7b80, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7b80]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7b80]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 0010259c. Address varnode: (unique, 0x10000e15, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e15]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e15]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a0. Address varnode: (unique, 0x10000e1d, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e1d]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e1d]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a0. Address varnode: (unique, 0x7c800, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7c800]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7c800]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a8. Address varnode: (unique, 0x7b80, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x7b80]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x7b80]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 001025a8. Address varnode: (unique, 0x10000e45, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode UNNAMED(UniquePcode[0x10000e45]) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer UNNAMED(UniquePcode[0x10000e45]) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100005ae, 1) FLOAT_LESSEQUAL (register, 0x50e0, 4) , (register, 0x5220, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025ac] Taint reached CBRANCH. Operands: ['fVar44(s7)', 'fVar46(s17)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100005b2, 1) FLOAT_LESSEQUAL (register, 0x50c0, 4) , (register, 0x5200, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025b4] Taint reached CBRANCH. Operands: ['fVar43(s6)', 'fVar45(s16)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100006d5, 1) FLOAT_LESSEQUAL (register, 0x5020, 4) , (register, 0x5080, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025bc] Taint reached CBRANCH. Operands: ['fVar38(s1)', 'fVar41(s4)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x100006d9, 1) FLOAT_LESSEQUAL (register, 0x50a0, 4) , (register, 0x5060, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025c8] Taint reached CBRANCH. Operands: ['fVar42(s5)', 'fVar40(s3)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x2080, 1) FLOAT_LESSEQUAL (register, 0x5000, 4) , (const, 0x0, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025d4] Taint reached CBRANCH. Operands: ['fVar37(s0)', 'UnnamedHighVar(Constant: 0x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5040, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025dc] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'UNNAMED(s2)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (register, 0x108, 1) INT_NOTEQUAL (unique, 0x11f80, 8) , (register, 0x40a8, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 001025ec] Taint reached CBRANCH. Operands: ['uVar34(x20)', 'uVar12(x0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x0, 4) , (register, 0x5020, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102624] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x0)', 'fVar36(s0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x1400, 1) FLOAT_LESS (const, 0x3e99999a, 4) , (register, 0x5000, 4)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [main @ 00102634] Taint reached CBRANCH. Operands: ['UnnamedHighVar(Constant: 0x3e99999a)', 'UNNAMED(s0)'].   
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [CBRANCH] Found defining op for condition: (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x40a8, 8) , (const, 0x0, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: [FILTER] Skipping branch at 001026b0 from instruction 'cbnz'.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] Checking LOAD op at 00102700. Address varnode: (register, 0x4008, 8)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] POINTER_RULE FAIL: Address varnode param_2(x1) is not tainted (recursive check).  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> DEBUG: [LOAD_HANDLER] REGION_RULE FAIL: Address pointer param_2(x1) is not in the tainted memory regions set.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> <<< Finished analyzing function: main.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> 
--- Stage 1 Complete. Checking for pending multi-stage analysis tasks... ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> --- No multi-stage analysis tasks were queued. ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> 
--- Taint Analysis Run Complete ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> \n--- All Detected Tainted Value Usages (Interprocedural) ---  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #1:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021c0  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026dc, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1580])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #2:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021e8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102398, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #3:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021f8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1021e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #4:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102220  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026a4, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #5:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102248  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102420, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1580])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #6:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102264  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1022b0, 1) , (unique, 0x10000947, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10000947])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #7:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102290  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #8:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001022ac  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102268, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #9:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001022f8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #10:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102300  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026c0, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #11:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102348  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #12:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010235c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #13:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102364  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102370, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #14:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010237c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102524, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #15:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010238c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   bVar9(tmpCY)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #16:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001023b8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10267c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #17:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001023fc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #18:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102454  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102470, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #19:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010246c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026cc, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #20:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102500  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10273c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #21:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010252c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102690, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #22:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010254c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpCY)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #23:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102560  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #24:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102574  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #25:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010257c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102588, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #26:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102594  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #27:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025ac  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025b0, 1) , (unique, 0x100005ae, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100005ae])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #28:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025b4  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025b8, 1) , (unique, 0x100005b2, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100005b2])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #29:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025bc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025c0, 1) , (unique, 0x100006d5, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100006d5])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #30:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025cc, 1) , (unique, 0x100006d9, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100006d9])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #31:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025d4  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025d8, 1) , (unique, 0x2080, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x2080])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #32:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025dc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102600, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #33:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025ec  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102558, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #34:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102624  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10262c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #35:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102634  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10263c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #36:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021c0  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026dc, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1580])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #37:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021e8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102398, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #38:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001021f8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1021e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #39:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102220  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026a4, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #40:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102248  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102420, 1) , (unique, 0x1580, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1580])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #41:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102264  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1022b0, 1) , (unique, 0x10000947, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x10000947])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #42:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102290  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #43:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001022ac  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102268, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #44:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001022f8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #45:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102300  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026c0, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #46:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102348  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #47:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010235c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #48:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102364  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102370, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #49:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010237c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102524, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #50:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010238c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   bVar9(tmpCY)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #51:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001023b8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10267c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #52:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001023fc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1023d8, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #53:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102454  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102470, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #54:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010246c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1026cc, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #55:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102500  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10273c, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #56:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010252c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102690, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #57:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010254c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102444, 1) , (register, 0x105, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpCY)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #58:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102560  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #59:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102574  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (const, 0x2, 1) , (register, 0x107, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpNG)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #60:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 0010257c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102588, 1) , (unique, 0x18880, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x18880])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #61:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102594  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025e0, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #62:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025ac  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025b0, 1) , (unique, 0x100005ae, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100005ae])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #63:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025b4  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025b8, 1) , (unique, 0x100005b2, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100005b2])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #64:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025bc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025c0, 1) , (unique, 0x100006d5, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100006d5])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #65:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025c8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025cc, 1) , (unique, 0x100006d9, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x100006d9])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #66:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025d4  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x1025d8, 1) , (unique, 0x2080, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x2080])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #67:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025dc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102600, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #68:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 001025ec  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x102558, 1) , (register, 0x108, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(tmpZR)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #69:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102624  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10262c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Usage #70:  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Originating Lib Call: getSessionOutput  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Found In Function:   main at 00101e80  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>   Instruction Address: 00102634  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     PCode Op:             ---  CBRANCH (ram, 0x10263c, 1) , (unique, 0x1400, 1)  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Usage Type:          BRANCH_CONDITION_TAINTED  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Tainted Component:   UNNAMED(UniquePcode[0x1400])  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py>     Details:             Tainted condition for branch.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> ----------------------------------------  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: TAINT_ANALYSIS_JSON_OUTPUT env var found. Saving results to: /Users/chenkexin/Desktop/kk/test_taint/results/ultraface_detector_mnn_taint_analysis_results.json  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> Taint analysis results saved to: /Users/chenkexin/Desktop/kk/test_taint/results/ultraface_detector_mnn_taint_analysis_results.json  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp w21,#0x0' at 001021bc for branch at 001021c0  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s0,s8' at 001021e4 for branch at 001021e8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x21' at 001021f4 for branch at 001021f8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x19,x22' at 0010221c for branch at 00102220  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x18,#0x140' at 00102244 for branch at 00102248  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x22,x20' at 00102260 for branch at 00102264  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 0010228c for branch at 00102290  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x22,x1' at 001022a8 for branch at 001022ac  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 001022f8. Skipping.  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102300. Skipping.  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102348. Skipping.  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 0010235c. Skipping.  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102364. Skipping.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'tst x2,x0' at 00102378 for branch at 0010237c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x20,x21' at 00102388 for branch at 0010238c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x2,x1' at 001023b4 for branch at 001023b8  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 001023f8 for branch at 001023fc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x1,x0' at 00102450 for branch at 00102454  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,s0' at 00102468 for branch at 0010246c  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not find preceding comparison instruction for branch at 00102500. Skipping.  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x0,x1' at 00102528 for branch at 0010252c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x20,x21' at 00102548 for branch at 0010254c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x2,#0x0' at 00102558 for branch at 00102560  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '00102560'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x2,#0x0' at 00102558 for branch at 00102574  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '00102574'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x2,#0x0' at 00102558 for branch at 0010257c  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'tst x0,x5' at 00102590 for branch at 00102594  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s17,s7' at 001025a4 for branch at 001025ac  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001025ac'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s16,s6' at 001025b0 for branch at 001025b4  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001025b4'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s4,s1' at 001025b8 for branch at 001025bc  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001025bc'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s3,s5' at 001025c0 for branch at 001025c8  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001025c8'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s0,#0.0' at 001025cc for branch at 001025d4  
2025-08-19 02:09:53 ERROR (GhidraScript) mnn_analyzer.py> WARN: Could not determine branch target for instruction at '001025d4'  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s2,#0.0' at 001025d8 for branch at 001025dc  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'cmp x2,x21' at 001025e8 for branch at 001025ec  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s1,#0.0' at 00102620 for branch at 00102624  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> INFO: Found preceding comparison instruction 'fcmpe s0,s9' at 00102630 for branch at 00102634  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> SUCCESS: Hook configuration saved to: /Users/chenkexin/Desktop/kk/test_taint/results/ultraface_detector_mnn_hook_config.json  
2025-08-19 02:09:53 INFO  (GhidraScript) mnn_analyzer.py> MNN Taint Analyzer finished.  
2025-08-19 02:09:54 INFO  (HeadlessAnalyzer) ANALYZING changes made by post scripts: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ultraface_detector_mnn  
2025-08-19 02:09:54 INFO  (HeadlessAnalyzer) REPORT: Post-analysis succeeded for file: file:///Users/chenkexin/Desktop/kk/test_taint/assets/ultraface_detector_mnn  
2025-08-19 02:09:54 INFO  (HeadlessAnalyzer) REPORT: Save succeeded for: /ultraface_detector_mnn (ultraface_detector_mnn:/ultraface_detector_mnn)  
2025-08-19 02:09:54 INFO  (HeadlessAnalyzer) REPORT: Import succeeded  
2025-08-19 02:09:54 DEBUG (DefaultProjectData) Closing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ultraface_detector_mnn.rep  
2025-08-19 02:09:54 DEBUG (DefaultProjectData) Disposing ProjectData: /Users/chenkexin/Desktop/kk/test_taint/ghidra_projects/ultraface_detector_mnn.rep  
